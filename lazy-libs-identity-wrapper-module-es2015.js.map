{"version":3,"sources":["./node_modules/@abp/ng.identity/fesm2015/abp-ng.identity.js","./node_modules/@abp/ng.permission-management/fesm2015/abp-ng.permission-management.js","./src/app/lazy-libs/identity-wrapper.module.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwH;AACH;AACpC;AAClC;AAC+B;AACR;AACpC;AACqC;AACxB;AACzB;AACuD;AACG;AACL;AAC/B;;AAE5C;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAKV;AACD;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAKV;AACD;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAKV;AACD;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAKV;AACD;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAKV;AACD;AACA;AACA,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAKV;AACD;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAKV;AACD;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAKV;AACD;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAKV;AACD;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAKV;AACD;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAKV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,kCAAkC,EAAE,OAAO;AAC3C,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,wCAAwC,GAAG;AAC3C;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,wCAAwC,GAAG;AAC3C;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,2CAA2C,QAAQ;AACnD;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,kCAAkC,EAAE,OAAO;AAC3C,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,wCAAwC,GAAG;AAC3C;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,wCAAwC,GAAG;AAC3C;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,wCAAwC,GAAG;AAC3C;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,2CAA2C,QAAQ;AACnD;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA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,OAAO,iDAAK;AACjB;AACA;AACA,eAAe,OAAO,uDAAS,qBAAqB,sBAAsB,wDAAU,EAAE,IAAI;AAC1F;AACA,wDAAU;AACV,IAAI,0DAAM;AACV,IAAI,wDAAU,gBAAgB,+CAAU;AACxC;AACA,wDAAU;AACV,IAAI,0DAAM;AACV,IAAI,wDAAU,gBAAgB,+CAAU;AACxC;AACA,WAAW,EA0CV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,EAAE;AAC9C;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,mDAAG;AAClB,oBAAoB;AACpB;AACA,0BAA0B,EAAE,kBAAkB,EAAE;AAChD;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,wDAAwD,wDAAW;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,0DAA0D,yDAAU,WAAW,yDAAU;AACzF;AACA;AACA,qBAAqB,yDAAU,WAAW,yDAAU,QAAQ,yDAAU;AACtE;AACA,kDAAkD,yDAAU;AAC5D,wDAAwD,yDAAU;AAClE,gEAAgE,yDAAU;AAC1E;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA,0BAA0B,mDAAG;AAC7B,oCAAoC;AACpC;AACA;AACA,mCAAmC,EAAE;AACrC,oCAAoC;AACpC;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,uBAAuB,EAAE;AACzB;AACA,gBAAgB,4EAAgB;AAChC,gBAAgB,yDAAU;AAC1B,gBAAgB,yDAAU;AAC1B;AACA,iDAAiD,0DAAW;AAC5D;AACA,gFAAgF,yDAAU;AAC1F;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,oCAAoC,EAAE,OAAO;AAC7C,6CAA6C,EAAE;AAC/C;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,kBAAkB,gEAAS;AAC3B,oBAAoB;AACpB;AACA,2DAA2D,4DAAK,mBAAmB,2DAAI;AACvF;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B,mBAAmB,EAAE;AACrB,gCAAgC,mDAAG;AACnC,oBAAoB;AACpB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,6CAA6C,mCAAmC,mDAAmD;AACnI,6CAA6C,oBAAoB,6BAA6B;AAC9F,kBAAkB,+DAAQ;AAC1B,oBAAoB;AACpB;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,kBAAkB,+DAAQ;AAC1B,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA,8MAA8M,0CAA0C,wUAAwU,4CAA4C,8iBAA8iB,iCAAiC,8aAA8a,iCAAiC,yaAAya,4CAA4C,iGAAiG,6CAA6C,qQAAqQ,iDAAiD,2OAA2O,gDAAgD,woBAAwoB,4CAA4C,sMAAsM,yCAAyC,uNAAuN,qEAAqE,gDAAgD,+PAA+P,2CAA2C,wGAAwG,iBAAiB,uBAAuB,cAAc,uBAAuB,oBAAoB,mNAAmN,mFAAmF,iNAAiN,8UAA8U,6CAA6C,4QAA4Q,qDAAqD,0NAA0N,wDAAwD,iOAAiO,6CAA6C,ibAAib,iDAAiD,mQAAmQ,gDAAgD,8gBAA8gB,mGAAmG,kaAAka,qGAAqG,sUAAsU,eAAe,qgBAAqgB,iBAAiB,gQAAgQ,2CAA2C,6GAA6G,qDAAqD;AACx7S,aAAa;AACb;AACA;AACA;AACA,KAAK,OAAO,wEAAmB,EAAE;AACjC,KAAK,OAAO,0DAAW,EAAE;AACzB,KAAK,OAAO,iDAAK;AACjB;AACA;AACA,oBAAoB,OAAO,uDAAS,0BAA0B,gBAAgB,IAAI;AAClF;AACA,wDAAU;AACV,IAAI,0DAAM;AACV,IAAI,wDAAU,gBAAgB,+CAAU;AACxC;AACA,wDAAU;AACV,IAAI,0DAAM;AACV,IAAI,wDAAU,gBAAgB,+CAAU;AACxC;AACA,WAAW,EAoDV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,YAAY,sCAAsC,QAAQ;AAC1D,WAAW,EAAE;AACb;AACA,KAAK,mDAAmD;AACxD;AACA;AACA,mBAAmB,mEAAsB;AACzC,sBAAsB,sDAAS,EAAE,4DAAe;AAChD;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB,0BAA0B,4DAAY;AACtC,0BAA0B,4DAAY;AACtC,aAAa;AACb;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB;AACA;AACA,oBAAoB,sDAAU;AAC9B,oBAAoB,uDAAU;AAC9B;AACA,oBAAoB,2EAAe;AACnC,oBAAoB,sEAAiB;AACrC,oBAAoB,0DAAW;AAC/B,oBAAoB,6EAAiB;AACrC,oBAAoB,yFAA0B;AAC9C,oBAAoB,yEAAqB;AACzC;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,wBAAwB,EAAE;AAC1B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,2FAA2F;AAC5G,iBAAiB,2FAA2F;AAC5G;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,eAAe,EAWV;AACL;AACA;AACA;AACA,gCAAgC;AAChC;AACA,eAAe,EAOV;AACL;AACA;AACA;AACA,yBAAyB;AACzB;AACA,eAAe,EAOV;AACL;AACA;AACA;AACA,yBAAyB;AACzB;AACA,eAAe,EAaV;AACL;AACA;AACA;AACA,qBAAqB;AACrB;AACA,eAAe,EAeV;AACL;AACA;AACA;AACA,gCAAgC;AAChC;AACA,eAAe,EAKV;AACL,CAAC,4BAA4B;;AAE7B;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEqS;AACrS;;;;;;;;;;;;;AC/1CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuD;AACE;AAC6E;AACrD;AAClC;AACb;AAC+B;;AAEjE;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAKV;AACD;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAKV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,uBAAuB,0CAA0C;AACjE,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,mBAAmB,cAAc;AACjC,qBAAqB,4BAA4B;AACjD;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK,OAAO,wDAAW;AACvB;AACA,iEAAiE,wEAAkB,EAAE,0DAA0D,wCAAwC,8DAAQ,CAAC,wDAAW,GAAG,EAAE,0DAA0D;AAC1Q,WAAW,EAMV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,gCAAgC,gBAAgB;AAChD;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,iCAAiC,gBAAgB;AACjD;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,6BAA6B,aAAa,GAAG,UAAU;AACvD,6EAA6E,0DAAG;AAChF,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,mCAAmC,UAAU;AAC7C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,wDAAU;AACV,IAAI,0DAAM;AACV,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,0DAAM;AACV,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,4DAAQ;AACZ,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,4DAAQ;AACZ,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,4BAA4B,wDAAU;AACtC,IAAI,yDAAK;AACT;AACA,8BAA8B,EAAE,MAAM,kBAAkB,EAAE;AAC1D,KAAK;AACL,IAAI,wDAAU;AACd;AACA,WAAW,EAMV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,iCAAiC,0DAAY;AAC7C;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,iCAAiC,0DAAG;AACpC,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,oBAAoB,0DAAG;AACvB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,mCAAmC,EAAE,kBAAkB,EAAE,qBAAqB,eAAe;AAC7F,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,6DAA6D;AAC7D;AACA;AACA,gBAAgB;AAChB;AACA,gBAAgB;AAChB;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,uCAAuC,mBAAmB;AAC1D;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA,2CAA2C,QAAQ,4BAA4B;AAC/E;AACA;AACA,2CAA2C,QAAQ,mBAAmB;AACtE;AACA;AACA,2CAA2C,QAAQ,kBAAkB;AACrE;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA,4CAA4C,2DAAI;AAChD,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,uBAAuB,EAAE;AACzB,wCAAwC,EAAE;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,mBAAmB,EAAE;AACrB,4CAA4C,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,4CAA4C,2DAAI;AAChD,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA,oCAAoC,4BAA4B,iCAAiC;AACjG;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,uCAAuC,eAAe,kGAAkG;AACxJ;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,UAAU,kBAAkB,OAAO,kBAAkB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,sBAAsB,+DAAQ;AAC9B,wBAAwB;AACxB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,kBAAkB,4DAAK;AACvB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA,qIAAqI,kCAAkC,iEAAiE,4DAA4D,KAAK,mBAAmB,kdAAkd,uFAAuF,gOAAgO,sPAAsP,sBAAsB,yHAAyH,8BAA8B,yiBAAyiB,mGAAmG,gLAAgL,gCAAgC,6zBAA6zB,0BAA0B,qOAAqO,yBAAyB,IAAI,wBAAwB,4RAA4R,2CAA2C,sFAAsF,yDAAyD;AAC34H,aAAa;AACb;AACA;AACA;AACA,KAAK,OAAO,iDAAK,EAAE;AACnB,KAAK,OAAO,uDAAS;AACrB;AACA;AACA,oBAAoB,OAAO,mDAAK,EAAE;AAClC,mBAAmB,OAAO,mDAAK,EAAE;AACjC,kBAAkB,OAAO,mDAAK,EAAE;AAChC,eAAe,OAAO,mDAAK,EAAE;AAC7B,qBAAqB,OAAO,oDAAM,EAAE;AACpC;AACA,wDAAU;AACV,IAAI,0DAAM;AACV,IAAI,wDAAU,gBAAgB,+CAAU;AACxC;AACA,wDAAU;AACV,IAAI,0DAAM;AACV,IAAI,wDAAU,gBAAgB,+CAAU;AACxC;AACA,WAAW,EAwCV;AACD;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB;AACA,0BAA0B,uDAAU,EAAE,sEAAiB,EAAE,sDAAU;AACnE;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,eAAe,EAGV;AACL;AACA;AACA;AACA,yBAAyB;AACzB;AACA,eAAe,EAKV;AACL;AACA;AACA;AACA,sBAAsB;AACtB;AACA,eAAe,EAOV;AACL;AACA;AACA;AACA,kCAAkC;AAClC;AACA,eAAe,EAKV;AACL;AACA;AACA;AACA,2BAA2B;AAC3B;AACA,eAAe,EASV;AACL;AACA;AACA;AACA,gCAAgC;AAChC;AACA,eAAe,EAKV;AACL;AACA;AACA;AACA,8BAA8B;AAC9B;AACA,eAAe,EAGV;AACL,CAAC,oDAAoD;;AAErD;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK,OAAO,iDAAK;AACjB;AACA,sEAAsE,wEAAkB,EAAE,+DAA+D,6CAA6C,8DAAQ,CAAC,iDAAK,GAAG,EAAE,+DAA+D;AACxR,WAAW,EAMV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAE0V;AAC1V;;;;;;;;;;;;;;;;;;;AC9yByC;AACS;AAKlD,IAAa,qBAAqB,GAAlC,MAAa,qBAAqB;CAAG;AAAxB,qBAAqB;IAHjC,8DAAQ,CAAC;QACR,OAAO,EAAE,CAAC,+DAAc,CAAC;KAC1B,CAAC;GACW,qBAAqB,CAAG;AAAH","file":"lazy-libs-identity-wrapper-module-es2015.js","sourcesContent":["import { RestService, ConfigState, DynamicLayoutComponent, AuthGuard, PermissionGuard, CoreModule } from '@abp/ng.core';\nimport { Injectable, ɵɵdefineInjectable, ɵɵinject, Component, ViewChild, ElementRef, NgModule } from '@angular/core';\nimport { Action, Selector, State, Store, Select, NgxsModule } from '@ngxs/store';\nimport { __decorate, __metadata } from 'tslib';\nimport { ConfirmationService, ThemeSharedModule } from '@abp/ng.theme.shared';\nimport { FormControl, Validators, FormBuilder } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { tap, pluck, finalize, switchMap, take } from 'rxjs/operators';\nimport { RouterModule } from '@angular/router';\nimport snq from 'snq';\nimport { validatePassword, NgxValidateCoreModule } from '@ngx-validate/core';\nimport { NgbTabsetModule, NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';\nimport { PermissionManagementModule } from '@abp/ng.permission-management';\nimport { TableModule } from 'primeng/table';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/actions/identity.actions.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass GetRoles {\n    /**\n     * @param {?=} payload\n     */\n    constructor(payload) {\n        this.payload = payload;\n    }\n}\nGetRoles.type = '[Identity] Get Roles';\nif (false) {\n    /** @type {?} */\n    GetRoles.type;\n    /** @type {?} */\n    GetRoles.prototype.payload;\n}\nclass GetRoleById {\n    /**\n     * @param {?} payload\n     */\n    constructor(payload) {\n        this.payload = payload;\n    }\n}\nGetRoleById.type = '[Identity] Get Role By Id';\nif (false) {\n    /** @type {?} */\n    GetRoleById.type;\n    /** @type {?} */\n    GetRoleById.prototype.payload;\n}\nclass DeleteRole {\n    /**\n     * @param {?} payload\n     */\n    constructor(payload) {\n        this.payload = payload;\n    }\n}\nDeleteRole.type = '[Identity] Delete Role';\nif (false) {\n    /** @type {?} */\n    DeleteRole.type;\n    /** @type {?} */\n    DeleteRole.prototype.payload;\n}\nclass CreateRole {\n    /**\n     * @param {?} payload\n     */\n    constructor(payload) {\n        this.payload = payload;\n    }\n}\nCreateRole.type = '[Identity] Create Role';\nif (false) {\n    /** @type {?} */\n    CreateRole.type;\n    /** @type {?} */\n    CreateRole.prototype.payload;\n}\nclass UpdateRole {\n    /**\n     * @param {?} payload\n     */\n    constructor(payload) {\n        this.payload = payload;\n    }\n}\nUpdateRole.type = '[Identity] Update Role';\nif (false) {\n    /** @type {?} */\n    UpdateRole.type;\n    /** @type {?} */\n    UpdateRole.prototype.payload;\n}\nclass GetUsers {\n    /**\n     * @param {?=} payload\n     */\n    constructor(payload) {\n        this.payload = payload;\n    }\n}\nGetUsers.type = '[Identity] Get Users';\nif (false) {\n    /** @type {?} */\n    GetUsers.type;\n    /** @type {?} */\n    GetUsers.prototype.payload;\n}\nclass GetUserById {\n    /**\n     * @param {?} payload\n     */\n    constructor(payload) {\n        this.payload = payload;\n    }\n}\nGetUserById.type = '[Identity] Get User By Id';\nif (false) {\n    /** @type {?} */\n    GetUserById.type;\n    /** @type {?} */\n    GetUserById.prototype.payload;\n}\nclass DeleteUser {\n    /**\n     * @param {?} payload\n     */\n    constructor(payload) {\n        this.payload = payload;\n    }\n}\nDeleteUser.type = '[Identity] Delete User';\nif (false) {\n    /** @type {?} */\n    DeleteUser.type;\n    /** @type {?} */\n    DeleteUser.prototype.payload;\n}\nclass CreateUser {\n    /**\n     * @param {?} payload\n     */\n    constructor(payload) {\n        this.payload = payload;\n    }\n}\nCreateUser.type = '[Identity] Create User';\nif (false) {\n    /** @type {?} */\n    CreateUser.type;\n    /** @type {?} */\n    CreateUser.prototype.payload;\n}\nclass UpdateUser {\n    /**\n     * @param {?} payload\n     */\n    constructor(payload) {\n        this.payload = payload;\n    }\n}\nUpdateUser.type = '[Identity] Update User';\nif (false) {\n    /** @type {?} */\n    UpdateUser.type;\n    /** @type {?} */\n    UpdateUser.prototype.payload;\n}\nclass GetUserRoles {\n    /**\n     * @param {?} payload\n     */\n    constructor(payload) {\n        this.payload = payload;\n    }\n}\nGetUserRoles.type = '[Identity] Get User Roles';\nif (false) {\n    /** @type {?} */\n    GetUserRoles.type;\n    /** @type {?} */\n    GetUserRoles.prototype.payload;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/services/identity.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass IdentityService {\n    /**\n     * @param {?} rest\n     */\n    constructor(rest) {\n        this.rest = rest;\n    }\n    /**\n     * @param {?=} params\n     * @return {?}\n     */\n    getRoles(params = (/** @type {?} */ ({}))) {\n        /** @type {?} */\n        const request = {\n            method: 'GET',\n            url: '/api/identity/roles',\n            params,\n        };\n        return this.rest.request(request);\n    }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    getRoleById(id) {\n        /** @type {?} */\n        const request = {\n            method: 'GET',\n            url: `/api/identity/roles/${id}`,\n        };\n        return this.rest.request(request);\n    }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    deleteRole(id) {\n        /** @type {?} */\n        const request = {\n            method: 'DELETE',\n            url: `/api/identity/roles/${id}`,\n        };\n        return this.rest.request(request);\n    }\n    /**\n     * @param {?} body\n     * @return {?}\n     */\n    createRole(body) {\n        /** @type {?} */\n        const request = {\n            method: 'POST',\n            url: '/api/identity/roles',\n            body,\n        };\n        return this.rest.request(request);\n    }\n    /**\n     * @param {?} body\n     * @return {?}\n     */\n    updateRole(body) {\n        /** @type {?} */\n        const url = `/api/identity/roles/${body.id}`;\n        delete body.id;\n        /** @type {?} */\n        const request = {\n            method: 'PUT',\n            url,\n            body,\n        };\n        return this.rest.request(request);\n    }\n    /**\n     * @param {?=} params\n     * @return {?}\n     */\n    getUsers(params = (/** @type {?} */ ({}))) {\n        /** @type {?} */\n        const request = {\n            method: 'GET',\n            url: '/api/identity/users',\n            params,\n        };\n        return this.rest.request(request);\n    }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    getUserById(id) {\n        /** @type {?} */\n        const request = {\n            method: 'GET',\n            url: `/api/identity/users/${id}`,\n        };\n        return this.rest.request(request);\n    }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    getUserRoles(id) {\n        /** @type {?} */\n        const request = {\n            method: 'GET',\n            url: `/api/identity/users/${id}/roles`,\n        };\n        return this.rest.request(request);\n    }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    deleteUser(id) {\n        /** @type {?} */\n        const request = {\n            method: 'DELETE',\n            url: `/api/identity/users/${id}`,\n        };\n        return this.rest.request(request);\n    }\n    /**\n     * @param {?} body\n     * @return {?}\n     */\n    createUser(body) {\n        /** @type {?} */\n        const request = {\n            method: 'POST',\n            url: '/api/identity/users',\n            body,\n        };\n        return this.rest.request(request);\n    }\n    /**\n     * @param {?} body\n     * @return {?}\n     */\n    updateUser(body) {\n        /** @type {?} */\n        const url = `/api/identity/users/${body.id}`;\n        delete body.id;\n        /** @type {?} */\n        const request = {\n            method: 'PUT',\n            url,\n            body,\n        };\n        return this.rest.request(request);\n    }\n}\nIdentityService.decorators = [\n    { type: Injectable, args: [{\n                providedIn: 'root',\n            },] }\n];\n/** @nocollapse */\nIdentityService.ctorParameters = () => [\n    { type: RestService }\n];\n/** @nocollapse */ IdentityService.ngInjectableDef = ɵɵdefineInjectable({ factory: function IdentityService_Factory() { return new IdentityService(ɵɵinject(RestService)); }, token: IdentityService, providedIn: \"root\" });\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    IdentityService.prototype.rest;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/states/identity.state.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nlet IdentityState = class IdentityState {\n    /**\n     * @param {?} identityService\n     */\n    constructor(identityService) {\n        this.identityService = identityService;\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    static getRoles({ roles }) {\n        return roles.items || [];\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    static getRolesTotalCount({ roles }) {\n        return roles.totalCount || 0;\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    static getUsers({ users }) {\n        return users.items || [];\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    static getUsersTotalCount({ users }) {\n        return users.totalCount || 0;\n    }\n    /**\n     * @param {?} __0\n     * @param {?} __1\n     * @return {?}\n     */\n    getRoles({ patchState }, { payload }) {\n        return this.identityService.getRoles(payload).pipe(tap((/**\n         * @param {?} roles\n         * @return {?}\n         */\n        roles => patchState({\n            roles,\n        }))));\n    }\n    /**\n     * @param {?} __0\n     * @param {?} __1\n     * @return {?}\n     */\n    getRole({ patchState }, { payload }) {\n        return this.identityService.getRoleById(payload).pipe(tap((/**\n         * @param {?} selectedRole\n         * @return {?}\n         */\n        selectedRole => patchState({\n            selectedRole,\n        }))));\n    }\n    /**\n     * @param {?} _\n     * @param {?} __1\n     * @return {?}\n     */\n    deleteRole(_, { payload }) {\n        return this.identityService.deleteRole(payload);\n    }\n    /**\n     * @param {?} _\n     * @param {?} __1\n     * @return {?}\n     */\n    addRole(_, { payload }) {\n        return this.identityService.createRole(payload);\n    }\n    /**\n     * @param {?} __0\n     * @param {?} __1\n     * @return {?}\n     */\n    updateRole({ getState }, { payload }) {\n        return this.identityService.updateRole(Object.assign({}, getState().selectedRole, payload));\n    }\n    /**\n     * @param {?} __0\n     * @param {?} __1\n     * @return {?}\n     */\n    getUsers({ patchState }, { payload }) {\n        return this.identityService.getUsers(payload).pipe(tap((/**\n         * @param {?} users\n         * @return {?}\n         */\n        users => patchState({\n            users,\n        }))));\n    }\n    /**\n     * @param {?} __0\n     * @param {?} __1\n     * @return {?}\n     */\n    getUser({ patchState }, { payload }) {\n        return this.identityService.getUserById(payload).pipe(tap((/**\n         * @param {?} selectedUser\n         * @return {?}\n         */\n        selectedUser => patchState({\n            selectedUser,\n        }))));\n    }\n    /**\n     * @param {?} _\n     * @param {?} __1\n     * @return {?}\n     */\n    deleteUser(_, { payload }) {\n        return this.identityService.deleteUser(payload);\n    }\n    /**\n     * @param {?} _\n     * @param {?} __1\n     * @return {?}\n     */\n    addUser(_, { payload }) {\n        return this.identityService.createUser(payload);\n    }\n    /**\n     * @param {?} __0\n     * @param {?} __1\n     * @return {?}\n     */\n    updateUser({ getState }, { payload }) {\n        return this.identityService.updateUser(Object.assign({}, getState().selectedUser, payload));\n    }\n    /**\n     * @param {?} __0\n     * @param {?} __1\n     * @return {?}\n     */\n    getUserRoles({ patchState }, { payload }) {\n        return this.identityService.getUserRoles(payload).pipe(pluck('items'), tap((/**\n         * @param {?} selectedUserRoles\n         * @return {?}\n         */\n        selectedUserRoles => patchState({\n            selectedUserRoles,\n        }))));\n    }\n};\nIdentityState.ctorParameters = () => [\n    { type: IdentityService }\n];\n__decorate([\n    Action(GetRoles),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object, GetRoles]),\n    __metadata(\"design:returntype\", void 0)\n], IdentityState.prototype, \"getRoles\", null);\n__decorate([\n    Action(GetRoleById),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object, GetRoleById]),\n    __metadata(\"design:returntype\", void 0)\n], IdentityState.prototype, \"getRole\", null);\n__decorate([\n    Action(DeleteRole),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object, GetRoleById]),\n    __metadata(\"design:returntype\", void 0)\n], IdentityState.prototype, \"deleteRole\", null);\n__decorate([\n    Action(CreateRole),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object, CreateRole]),\n    __metadata(\"design:returntype\", void 0)\n], IdentityState.prototype, \"addRole\", null);\n__decorate([\n    Action(UpdateRole),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object, UpdateRole]),\n    __metadata(\"design:returntype\", void 0)\n], IdentityState.prototype, \"updateRole\", null);\n__decorate([\n    Action(GetUsers),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object, GetUsers]),\n    __metadata(\"design:returntype\", void 0)\n], IdentityState.prototype, \"getUsers\", null);\n__decorate([\n    Action(GetUserById),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object, GetUserById]),\n    __metadata(\"design:returntype\", void 0)\n], IdentityState.prototype, \"getUser\", null);\n__decorate([\n    Action(DeleteUser),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object, GetUserById]),\n    __metadata(\"design:returntype\", void 0)\n], IdentityState.prototype, \"deleteUser\", null);\n__decorate([\n    Action(CreateUser),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object, CreateUser]),\n    __metadata(\"design:returntype\", void 0)\n], IdentityState.prototype, \"addUser\", null);\n__decorate([\n    Action(UpdateUser),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object, UpdateUser]),\n    __metadata(\"design:returntype\", void 0)\n], IdentityState.prototype, \"updateUser\", null);\n__decorate([\n    Action(GetUserRoles),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object, GetUserRoles]),\n    __metadata(\"design:returntype\", void 0)\n], IdentityState.prototype, \"getUserRoles\", null);\n__decorate([\n    Selector(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object]),\n    __metadata(\"design:returntype\", Array)\n], IdentityState, \"getRoles\", null);\n__decorate([\n    Selector(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object]),\n    __metadata(\"design:returntype\", Number)\n], IdentityState, \"getRolesTotalCount\", null);\n__decorate([\n    Selector(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object]),\n    __metadata(\"design:returntype\", Array)\n], IdentityState, \"getUsers\", null);\n__decorate([\n    Selector(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object]),\n    __metadata(\"design:returntype\", Number)\n], IdentityState, \"getUsersTotalCount\", null);\nIdentityState = __decorate([\n    State({\n        name: 'IdentityState',\n        defaults: (/** @type {?} */ ({ roles: {}, selectedRole: {}, users: {}, selectedUser: {} })),\n    }),\n    __metadata(\"design:paramtypes\", [IdentityService])\n], IdentityState);\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    IdentityState.prototype.identityService;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/roles/roles.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass RolesComponent {\n    /**\n     * @param {?} confirmationService\n     * @param {?} fb\n     * @param {?} store\n     */\n    constructor(confirmationService, fb, store) {\n        this.confirmationService = confirmationService;\n        this.fb = fb;\n        this.store = store;\n        this.visiblePermissions = false;\n        this.pageQuery = {};\n        this.loading = false;\n        this.modalBusy = false;\n        this.sortOrder = '';\n        this.sortKey = '';\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.get();\n    }\n    /**\n     * @return {?}\n     */\n    createForm() {\n        this.form = this.fb.group({\n            name: new FormControl({ value: this.selected.name || '', disabled: this.selected.isStatic }, [\n                Validators.required,\n                Validators.maxLength(256),\n            ]),\n            isDefault: [this.selected.isDefault || false],\n            isPublic: [this.selected.isPublic || false],\n        });\n    }\n    /**\n     * @return {?}\n     */\n    openModal() {\n        this.createForm();\n        this.isModalVisible = true;\n    }\n    /**\n     * @return {?}\n     */\n    add() {\n        this.selected = (/** @type {?} */ ({}));\n        this.openModal();\n    }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    edit(id) {\n        this.store\n            .dispatch(new GetRoleById(id))\n            .pipe(pluck('IdentityState', 'selectedRole'))\n            .subscribe((/**\n         * @param {?} selectedRole\n         * @return {?}\n         */\n        selectedRole => {\n            this.selected = selectedRole;\n            this.openModal();\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    save() {\n        if (!this.form.valid)\n            return;\n        this.modalBusy = true;\n        this.store\n            .dispatch(this.selected.id\n            ? new UpdateRole(Object.assign({}, this.selected, this.form.value, { id: this.selected.id }))\n            : new CreateRole(this.form.value))\n            .pipe(finalize((/**\n         * @return {?}\n         */\n        () => (this.modalBusy = false))))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this.isModalVisible = false;\n            this.get();\n        }));\n    }\n    /**\n     * @param {?} id\n     * @param {?} name\n     * @return {?}\n     */\n    delete(id, name) {\n        this.confirmationService\n            .warn('AbpIdentity::RoleDeletionConfirmationMessage', 'AbpIdentity::AreYouSure', {\n            messageLocalizationParams: [name],\n        })\n            .subscribe((/**\n         * @param {?} status\n         * @return {?}\n         */\n        (status) => {\n            if (status === \"confirm\" /* confirm */) {\n                this.store.dispatch(new DeleteRole(id)).subscribe((/**\n                 * @return {?}\n                 */\n                () => this.get()));\n            }\n        }));\n    }\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n    onPageChange(data) {\n        this.pageQuery.skipCount = data.first;\n        this.pageQuery.maxResultCount = data.rows;\n        this.get();\n    }\n    /**\n     * @return {?}\n     */\n    get() {\n        this.loading = true;\n        this.store\n            .dispatch(new GetRoles(this.pageQuery))\n            .pipe(finalize((/**\n         * @return {?}\n         */\n        () => (this.loading = false))))\n            .subscribe();\n    }\n    /**\n     * @return {?}\n     */\n    onClickSaveButton() {\n        this.formRef.nativeElement.dispatchEvent(new Event('submit', { bubbles: true, cancelable: true }));\n    }\n}\nRolesComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'abp-roles',\n                template: \"<div id=\\\"identity-roles-wrapper\\\" class=\\\"card\\\">\\n  <div class=\\\"card-header\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col col-md-6\\\">\\n        <h5 class=\\\"card-title\\\">{{ 'AbpIdentity::Roles' | abpLocalization }}</h5>\\n      </div>\\n      <div class=\\\"text-right col col-md-6\\\">\\n        <button\\n          *abpPermission=\\\"'AbpIdentity.Roles.Create'\\\"\\n          id=\\\"create-role\\\"\\n          class=\\\"btn btn-primary\\\"\\n          type=\\\"button\\\"\\n          (click)=\\\"add()\\\"\\n        >\\n          <i class=\\\"fa fa-plus mr-1\\\"></i>\\n          <span>{{ 'AbpIdentity::NewRole' | abpLocalization }}</span>\\n        </button>\\n      </div>\\n    </div>\\n  </div>\\n\\n  <div class=\\\"card-body\\\">\\n    <p-table\\n      *ngIf=\\\"[150, 0] as columnWidths\\\"\\n      [value]=\\\"data$ | async\\\"\\n      [abpTableSort]=\\\"{ key: sortKey, order: sortOrder }\\\"\\n      [lazy]=\\\"true\\\"\\n      [lazyLoadOnInit]=\\\"false\\\"\\n      [paginator]=\\\"true\\\"\\n      [rows]=\\\"10\\\"\\n      [totalRecords]=\\\"totalCount$ | async\\\"\\n      [loading]=\\\"loading\\\"\\n      [resizableColumns]=\\\"true\\\"\\n      [scrollable]=\\\"true\\\"\\n      (onLazyLoad)=\\\"onPageChange($event)\\\"\\n    >\\n      <ng-template pTemplate=\\\"colgroup\\\">\\n        <colgroup>\\n          <col *ngFor=\\\"let width of columnWidths\\\" [ngStyle]=\\\"{ 'width.px': width || undefined }\\\" />\\n        </colgroup>\\n      </ng-template>\\n      <ng-template pTemplate=\\\"emptymessage\\\" let-columns>\\n        <tr\\n          abp-table-empty-message\\n          [attr.colspan]=\\\"columnWidths.length\\\"\\n          localizationResource=\\\"AbpIdentity\\\"\\n          localizationProp=\\\"NoDataAvailableInDatatable\\\"\\n        ></tr>\\n      </ng-template>\\n      <ng-template pTemplate=\\\"header\\\" let-columns>\\n        <tr>\\n          <th>{{ 'AbpIdentity::Actions' | abpLocalization }}</th>\\n          <th pResizableColumn (click)=\\\"sortOrderIcon.sort('name')\\\">\\n            {{ 'AbpIdentity::RoleName' | abpLocalization }}\\n            <abp-sort-order-icon\\n              #sortOrderIcon\\n              key=\\\"name\\\"\\n              [(selectedKey)]=\\\"sortKey\\\"\\n              [(order)]=\\\"sortOrder\\\"\\n            ></abp-sort-order-icon>\\n          </th>\\n        </tr>\\n      </ng-template>\\n      <ng-template pTemplate=\\\"body\\\" let-data>\\n        <tr>\\n          <td class=\\\"text-center\\\">\\n            <div ngbDropdown container=\\\"body\\\" class=\\\"d-inline-block\\\">\\n              <button\\n                class=\\\"btn btn-primary btn-sm dropdown-toggle\\\"\\n                data-toggle=\\\"dropdown\\\"\\n                aria-haspopup=\\\"true\\\"\\n                ngbDropdownToggle\\n              >\\n                <i class=\\\"fa fa-cog mr-1\\\"></i>{{ 'AbpIdentity::Actions' | abpLocalization }}\\n              </button>\\n              <div ngbDropdownMenu>\\n                <button\\n                  *abpPermission=\\\"'AbpIdentity.Roles.Update'\\\"\\n                  ngbDropdownItem\\n                  (click)=\\\"edit(data.id)\\\"\\n                >\\n                  {{ 'AbpIdentity::Edit' | abpLocalization }}\\n                </button>\\n                <button\\n                  *abpPermission=\\\"'AbpIdentity.Roles.ManagePermissions'\\\"\\n                  ngbDropdownItem\\n                  (click)=\\\"providerKey = data.name; visiblePermissions = true\\\"\\n                >\\n                  {{ 'AbpIdentity::Permissions' | abpLocalization }}\\n                </button>\\n                <button\\n                  *abpPermission=\\\"'AbpIdentity.Roles.Delete'\\\"\\n                  ngbDropdownItem\\n                  (click)=\\\"delete(data.id, data.name)\\\"\\n                >\\n                  {{ 'AbpIdentity::Delete' | abpLocalization }}\\n                </button>\\n              </div>\\n            </div>\\n          </td>\\n          <td>\\n            {{ data.name\\n            }}<span *ngIf=\\\"data.isDefault\\\" class=\\\"badge badge-pill badge-success ml-1\\\">{{\\n              'AbpIdentity::DisplayName:IsDefault' | abpLocalization\\n            }}</span>\\n            <span *ngIf=\\\"data.isPublic\\\" class=\\\"badge badge-pill badge-info ml-1\\\">{{\\n              'AbpIdentity::DisplayName:IsPublic' | abpLocalization\\n            }}</span>\\n          </td>\\n        </tr>\\n      </ng-template>\\n    </p-table>\\n  </div>\\n</div>\\n\\n<abp-modal size=\\\"md\\\" [(visible)]=\\\"isModalVisible\\\" [busy]=\\\"modalBusy\\\">\\n  <ng-template #abpHeader>\\n    <h3>{{ (selected?.id ? 'AbpIdentity::Edit' : 'AbpIdentity::NewRole') | abpLocalization }}</h3>\\n  </ng-template>\\n\\n  <ng-template #abpBody>\\n    <form #formRef [formGroup]=\\\"form\\\" (ngSubmit)=\\\"save()\\\" validateOnSubmit>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"role-name\\\">{{ 'AbpIdentity::RoleName' | abpLocalization }}</label\\n        ><span> * </span>\\n        <input autofocus type=\\\"text\\\" id=\\\"role-name\\\" class=\\\"form-control\\\" formControlName=\\\"name\\\" />\\n      </div>\\n\\n      <div class=\\\"custom-checkbox custom-control mb-2\\\">\\n        <input\\n          type=\\\"checkbox\\\"\\n          id=\\\"role-is-default\\\"\\n          class=\\\"custom-control-input\\\"\\n          formControlName=\\\"isDefault\\\"\\n        />\\n        <label class=\\\"custom-control-label\\\" for=\\\"role-is-default\\\">{{\\n          'AbpIdentity::DisplayName:IsDefault' | abpLocalization\\n        }}</label>\\n      </div>\\n\\n      <div class=\\\"custom-checkbox custom-control mb-2\\\">\\n        <input\\n          type=\\\"checkbox\\\"\\n          id=\\\"role-is-public\\\"\\n          class=\\\"custom-control-input\\\"\\n          formControlName=\\\"isPublic\\\"\\n        />\\n        <label class=\\\"custom-control-label\\\" for=\\\"role-is-public\\\">{{\\n          'AbpIdentity::DisplayName:IsPublic' | abpLocalization\\n        }}</label>\\n      </div>\\n    </form>\\n  </ng-template>\\n\\n  <ng-template #abpFooter>\\n    <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" #abpClose>\\n      {{ 'AbpIdentity::Cancel' | abpLocalization }}\\n    </button>\\n    <abp-button iconClass=\\\"fa fa-check\\\" [disabled]=\\\"form?.invalid\\\" (click)=\\\"onClickSaveButton()\\\">{{\\n      'AbpIdentity::Save' | abpLocalization\\n    }}</abp-button>\\n  </ng-template>\\n</abp-modal>\\n\\n<abp-permission-management\\n  [(visible)]=\\\"visiblePermissions\\\"\\n  providerName=\\\"R\\\"\\n  [providerKey]=\\\"providerKey\\\"\\n  [hideBadges]=\\\"true\\\"\\n>\\n</abp-permission-management>\\n\"\n            }] }\n];\n/** @nocollapse */\nRolesComponent.ctorParameters = () => [\n    { type: ConfirmationService },\n    { type: FormBuilder },\n    { type: Store }\n];\nRolesComponent.propDecorators = {\n    formRef: [{ type: ViewChild, args: ['formRef', { static: false, read: ElementRef },] }]\n};\n__decorate([\n    Select(IdentityState.getRoles),\n    __metadata(\"design:type\", Observable)\n], RolesComponent.prototype, \"data$\", void 0);\n__decorate([\n    Select(IdentityState.getRolesTotalCount),\n    __metadata(\"design:type\", Observable)\n], RolesComponent.prototype, \"totalCount$\", void 0);\nif (false) {\n    /** @type {?} */\n    RolesComponent.prototype.data$;\n    /** @type {?} */\n    RolesComponent.prototype.totalCount$;\n    /** @type {?} */\n    RolesComponent.prototype.form;\n    /** @type {?} */\n    RolesComponent.prototype.selected;\n    /** @type {?} */\n    RolesComponent.prototype.isModalVisible;\n    /** @type {?} */\n    RolesComponent.prototype.visiblePermissions;\n    /** @type {?} */\n    RolesComponent.prototype.providerKey;\n    /** @type {?} */\n    RolesComponent.prototype.pageQuery;\n    /** @type {?} */\n    RolesComponent.prototype.loading;\n    /** @type {?} */\n    RolesComponent.prototype.modalBusy;\n    /** @type {?} */\n    RolesComponent.prototype.sortOrder;\n    /** @type {?} */\n    RolesComponent.prototype.sortKey;\n    /** @type {?} */\n    RolesComponent.prototype.formRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    RolesComponent.prototype.confirmationService;\n    /**\n     * @type {?}\n     * @private\n     */\n    RolesComponent.prototype.fb;\n    /**\n     * @type {?}\n     * @private\n     */\n    RolesComponent.prototype.store;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/users/users.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass UsersComponent {\n    /**\n     * @param {?} confirmationService\n     * @param {?} fb\n     * @param {?} store\n     */\n    constructor(confirmationService, fb, store) {\n        this.confirmationService = confirmationService;\n        this.fb = fb;\n        this.store = store;\n        this.visiblePermissions = false;\n        this.pageQuery = {};\n        this.loading = false;\n        this.modalBusy = false;\n        this.sortOrder = '';\n        this.sortKey = '';\n        this.passwordRulesArr = (/** @type {?} */ ([]));\n        this.requiredPasswordLength = 1;\n        this.trackByFn = (/**\n         * @param {?} index\n         * @param {?} item\n         * @return {?}\n         */\n        (index, item) => Object.keys(item)[0] || index);\n    }\n    /**\n     * @return {?}\n     */\n    get roleGroups() {\n        return snq((/**\n         * @return {?}\n         */\n        () => (/** @type {?} */ (((/** @type {?} */ (this.form.get('roleNames')))).controls))), []);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.get();\n        /** @type {?} */\n        const passwordRules = this.store.selectSnapshot(ConfigState.getSettings('Identity.Password'));\n        if ((passwordRules['Abp.Identity.Password.RequireDigit'] || '').toLowerCase() === 'true') {\n            this.passwordRulesArr.push('number');\n        }\n        if ((passwordRules['Abp.Identity.Password.RequireLowercase'] || '').toLowerCase() === 'true') {\n            this.passwordRulesArr.push('small');\n        }\n        if ((passwordRules['Abp.Identity.Password.RequireUppercase'] || '').toLowerCase() === 'true') {\n            this.passwordRulesArr.push('capital');\n        }\n        if (+(passwordRules['Abp.Identity.Password.RequiredUniqueChars'] || 0) > 0) {\n            this.passwordRulesArr.push('special');\n        }\n        if (Number.isInteger(+passwordRules['Abp.Identity.Password.RequiredLength'])) {\n            this.requiredPasswordLength = +passwordRules['Abp.Identity.Password.RequiredLength'];\n        }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    onSearch(value) {\n        this.pageQuery.filter = value;\n        this.get();\n    }\n    /**\n     * @return {?}\n     */\n    buildForm() {\n        this.store.dispatch(new GetRoles()).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this.roles = this.store.selectSnapshot(IdentityState.getRoles);\n            this.form = this.fb.group({\n                userName: [this.selected.userName || '', [Validators.required, Validators.maxLength(256)]],\n                email: [\n                    this.selected.email || '',\n                    [Validators.required, Validators.email, Validators.maxLength(256)],\n                ],\n                name: [this.selected.name || '', [Validators.maxLength(64)]],\n                surname: [this.selected.surname || '', [Validators.maxLength(64)]],\n                phoneNumber: [this.selected.phoneNumber || '', [Validators.maxLength(16)]],\n                lockoutEnabled: [this.selected.lockoutEnabled || (this.selected.id ? false : true)],\n                twoFactorEnabled: [this.selected.twoFactorEnabled || (this.selected.id ? false : true)],\n                roleNames: this.fb.array(this.roles.map((/**\n                 * @param {?} role\n                 * @return {?}\n                 */\n                role => this.fb.group({\n                    [role.name]: [\n                        !!snq((/**\n                         * @return {?}\n                         */\n                        () => this.selectedUserRoles.find((/**\n                         * @param {?} userRole\n                         * @return {?}\n                         */\n                        userRole => userRole.id === role.id)))),\n                    ],\n                })))),\n            });\n            /** @type {?} */\n            const passwordValidators = [\n                validatePassword(this.passwordRulesArr),\n                Validators.minLength(this.requiredPasswordLength),\n                Validators.maxLength(32),\n            ];\n            this.form.addControl('password', new FormControl('', [...passwordValidators]));\n            if (!this.selected.userName) {\n                this.form.get('password').setValidators([...passwordValidators, Validators.required]);\n                this.form.get('password').updateValueAndValidity();\n            }\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    openModal() {\n        this.buildForm();\n        this.isModalVisible = true;\n    }\n    /**\n     * @return {?}\n     */\n    add() {\n        this.selected = (/** @type {?} */ ({}));\n        this.selectedUserRoles = (/** @type {?} */ ([]));\n        this.openModal();\n    }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    edit(id) {\n        this.store\n            .dispatch(new GetUserById(id))\n            .pipe(switchMap((/**\n         * @return {?}\n         */\n        () => this.store.dispatch(new GetUserRoles(id)))), pluck('IdentityState'), take(1))\n            .subscribe((/**\n         * @param {?} state\n         * @return {?}\n         */\n        (state) => {\n            this.selected = state.selectedUser;\n            this.selectedUserRoles = state.selectedUserRoles;\n            this.openModal();\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    save() {\n        if (!this.form.valid || this.modalBusy)\n            return;\n        this.modalBusy = true;\n        const { roleNames } = this.form.value;\n        /** @type {?} */\n        const mappedRoleNames = snq((/**\n         * @return {?}\n         */\n        () => roleNames.filter((/**\n         * @param {?} role\n         * @return {?}\n         */\n        role => !!role[Object.keys(role)[0]])).map((/**\n         * @param {?} role\n         * @return {?}\n         */\n        role => Object.keys(role)[0]))), []);\n        this.store\n            .dispatch(this.selected.id\n            ? new UpdateUser(Object.assign({}, this.selected, this.form.value, { id: this.selected.id, roleNames: mappedRoleNames }))\n            : new CreateUser(Object.assign({}, this.form.value, { roleNames: mappedRoleNames })))\n            .pipe(finalize((/**\n         * @return {?}\n         */\n        () => (this.modalBusy = false))))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this.isModalVisible = false;\n            this.get();\n        }));\n    }\n    /**\n     * @param {?} id\n     * @param {?} userName\n     * @return {?}\n     */\n    delete(id, userName) {\n        this.confirmationService\n            .warn('AbpIdentity::UserDeletionConfirmationMessage', 'AbpIdentity::AreYouSure', {\n            messageLocalizationParams: [userName],\n        })\n            .subscribe((/**\n         * @param {?} status\n         * @return {?}\n         */\n        (status) => {\n            if (status === \"confirm\" /* confirm */) {\n                this.store.dispatch(new DeleteUser(id)).subscribe((/**\n                 * @return {?}\n                 */\n                () => this.get()));\n            }\n        }));\n    }\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n    onPageChange(data) {\n        this.pageQuery.skipCount = data.first;\n        this.pageQuery.maxResultCount = data.rows;\n        this.get();\n    }\n    /**\n     * @return {?}\n     */\n    get() {\n        this.loading = true;\n        this.store\n            .dispatch(new GetUsers(this.pageQuery))\n            .pipe(finalize((/**\n         * @return {?}\n         */\n        () => (this.loading = false))))\n            .subscribe();\n    }\n}\nUsersComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'abp-users',\n                template: \"<div id=\\\"identity-roles-wrapper\\\" class=\\\"card\\\">\\n  <div class=\\\"card-header\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col col-md-6\\\">\\n        <h5 class=\\\"card-title\\\">{{ 'AbpIdentity::Users' | abpLocalization }}</h5>\\n      </div>\\n      <div class=\\\"text-right col col-md-6\\\">\\n        <button\\n          *abpPermission=\\\"'AbpIdentity.Users.Create'\\\"\\n          id=\\\"create-role\\\"\\n          class=\\\"btn btn-primary\\\"\\n          type=\\\"button\\\"\\n          (click)=\\\"add()\\\"\\n        >\\n          <i class=\\\"fa fa-plus mr-1\\\"></i> <span>{{ 'AbpIdentity::NewUser' | abpLocalization }}</span>\\n        </button>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"card-body\\\">\\n    <div id=\\\"data-tables-table-filter\\\" class=\\\"data-tables-filter\\\">\\n      <label\\n        ><input\\n          type=\\\"search\\\"\\n          class=\\\"form-control form-control-sm\\\"\\n          [placeholder]=\\\"'AbpUi::PagerSearch' | abpLocalization\\\"\\n          (input.debounce)=\\\"onSearch($event.target.value)\\\"\\n      /></label>\\n    </div>\\n    <p-table\\n      *ngIf=\\\"[150, 250, 250, 250] as columnWidths\\\"\\n      [value]=\\\"data$ | async\\\"\\n      [abpTableSort]=\\\"{ key: sortKey, order: sortOrder }\\\"\\n      [lazy]=\\\"true\\\"\\n      [lazyLoadOnInit]=\\\"false\\\"\\n      [paginator]=\\\"true\\\"\\n      [rows]=\\\"10\\\"\\n      [totalRecords]=\\\"totalCount$ | async\\\"\\n      [loading]=\\\"loading\\\"\\n      [resizableColumns]=\\\"true\\\"\\n      [scrollable]=\\\"true\\\"\\n      (onLazyLoad)=\\\"onPageChange($event)\\\"\\n    >\\n      <ng-template pTemplate=\\\"colgroup\\\">\\n        <colgroup>\\n          <col *ngFor=\\\"let width of columnWidths\\\" [ngStyle]=\\\"{ 'width.px': width || undefined }\\\" />\\n        </colgroup>\\n      </ng-template>\\n      <ng-template pTemplate=\\\"emptymessage\\\" let-columns>\\n        <tr\\n          abp-table-empty-message\\n          [attr.colspan]=\\\"columnWidths.length\\\"\\n          localizationResource=\\\"AbpIdentity\\\"\\n          localizationProp=\\\"NoDataAvailableInDatatable\\\"\\n        ></tr>\\n      </ng-template>\\n      <ng-template pTemplate=\\\"header\\\">\\n        <tr>\\n          <th>{{ 'AbpIdentity::Actions' | abpLocalization }}</th>\\n          <th pResizableColumn (click)=\\\"sortOrderIcon.sort('userName')\\\">\\n            {{ 'AbpIdentity::UserName' | abpLocalization }}\\n            <abp-sort-order-icon #sortOrderIcon key=\\\"userName\\\" [(selectedKey)]=\\\"sortKey\\\" [(order)]=\\\"sortOrder\\\">\\n            </abp-sort-order-icon>\\n          </th>\\n          <th pResizableColumn (click)=\\\"sortOrderIcon.sort('email')\\\">\\n            {{ 'AbpIdentity::EmailAddress' | abpLocalization }}\\n            <abp-sort-order-icon key=\\\"email\\\" [(selectedKey)]=\\\"sortKey\\\" [(order)]=\\\"sortOrder\\\"></abp-sort-order-icon>\\n          </th>\\n          <th pResizableColumn (click)=\\\"sortOrderIcon.sort('phoneNumber')\\\">\\n            {{ 'AbpIdentity::PhoneNumber' | abpLocalization }}\\n            <abp-sort-order-icon key=\\\"phoneNumber\\\" [(selectedKey)]=\\\"sortKey\\\" [(order)]=\\\"sortOrder\\\">\\n            </abp-sort-order-icon>\\n          </th>\\n        </tr>\\n      </ng-template>\\n      <ng-template pTemplate=\\\"body\\\" let-data>\\n        <tr>\\n          <td class=\\\"text-center\\\">\\n            <div ngbDropdown container=\\\"body\\\" class=\\\"d-inline-block\\\">\\n              <button\\n                class=\\\"btn btn-primary btn-sm dropdown-toggle\\\"\\n                data-toggle=\\\"dropdown\\\"\\n                aria-haspopup=\\\"true\\\"\\n                ngbDropdownToggle\\n              >\\n                <i class=\\\"fa fa-cog mr-1\\\"></i>{{ 'AbpIdentity::Actions' | abpLocalization }}\\n              </button>\\n              <div ngbDropdownMenu>\\n                <button *abpPermission=\\\"'AbpIdentity.Users.Update'\\\" ngbDropdownItem (click)=\\\"edit(data.id)\\\">\\n                  {{ 'AbpIdentity::Edit' | abpLocalization }}\\n                </button>\\n                <button\\n                  *abpPermission=\\\"'AbpIdentity.Users.ManagePermissions'\\\"\\n                  ngbDropdownItem\\n                  (click)=\\\"providerKey = data.id; visiblePermissions = true\\\"\\n                >\\n                  {{ 'AbpIdentity::Permissions' | abpLocalization }}\\n                </button>\\n                <button\\n                  *abpPermission=\\\"'AbpIdentity.Users.Delete'\\\"\\n                  ngbDropdownItem\\n                  (click)=\\\"delete(data.id, data.userName)\\\"\\n                >\\n                  {{ 'AbpIdentity::Delete' | abpLocalization }}\\n                </button>\\n              </div>\\n            </div>\\n          </td>\\n          <td>{{ data.userName }}</td>\\n          <td>{{ data.email }}</td>\\n          <td>{{ data.phoneNumber }}</td>\\n        </tr>\\n      </ng-template>\\n    </p-table>\\n  </div>\\n</div>\\n\\n<abp-modal [(visible)]=\\\"isModalVisible\\\" [busy]=\\\"modalBusy\\\" (disappear)=\\\"form = null\\\">\\n  <ng-template #abpHeader>\\n    <h3>{{ (selected?.id ? 'AbpIdentity::Edit' : 'AbpIdentity::NewUser') | abpLocalization }}</h3>\\n  </ng-template>\\n\\n  <ng-template #abpBody>\\n    <ng-template #loaderRef\\n      ><div class=\\\"text-center\\\"><i class=\\\"fa fa-pulse fa-spinner\\\"></i></div\\n    ></ng-template>\\n\\n    <form *ngIf=\\\"form; else loaderRef\\\" [formGroup]=\\\"form\\\" (ngSubmit)=\\\"save()\\\">\\n      <ngb-tabset>\\n        <ngb-tab [title]=\\\"'AbpIdentity::UserInformations' | abpLocalization\\\">\\n          <ng-template ngbTabContent>\\n            <div class=\\\"mt-2 fade-in-top\\\">\\n              <div class=\\\"form-group\\\">\\n                <label for=\\\"user-name\\\">{{ 'AbpIdentity::UserName' | abpLocalization }}</label\\n                ><span> * </span>\\n                <input type=\\\"text\\\" id=\\\"user-name\\\" class=\\\"form-control\\\" formControlName=\\\"userName\\\" autofocus />\\n              </div>\\n\\n              <div class=\\\"form-group\\\">\\n                <label for=\\\"name\\\">{{ 'AbpIdentity::DisplayName:Name' | abpLocalization }}</label>\\n                <input type=\\\"text\\\" id=\\\"name\\\" class=\\\"form-control\\\" formControlName=\\\"name\\\" />\\n              </div>\\n\\n              <div class=\\\"form-group\\\">\\n                <label for=\\\"surname\\\">{{ 'AbpIdentity::DisplayName:Surname' | abpLocalization }}</label>\\n                <input type=\\\"text\\\" id=\\\"surname\\\" class=\\\"form-control\\\" formControlName=\\\"surname\\\" />\\n              </div>\\n\\n              <div class=\\\"form-group\\\">\\n                <label for=\\\"password\\\">{{ 'AbpIdentity::Password' | abpLocalization }}</label\\n                ><span *ngIf=\\\"!selected.userName\\\"> * </span>\\n                <input\\n                  type=\\\"password\\\"\\n                  id=\\\"password\\\"\\n                  autocomplete=\\\"new-password\\\"\\n                  class=\\\"form-control\\\"\\n                  formControlName=\\\"password\\\"\\n                />\\n              </div>\\n\\n              <div class=\\\"form-group\\\">\\n                <label for=\\\"email\\\">{{ 'AbpIdentity::EmailAddress' | abpLocalization }}</label\\n                ><span> * </span>\\n                <input type=\\\"text\\\" id=\\\"email\\\" class=\\\"form-control\\\" formControlName=\\\"email\\\" />\\n              </div>\\n\\n              <div class=\\\"form-group\\\">\\n                <label for=\\\"phone-number\\\">{{ 'AbpIdentity::PhoneNumber' | abpLocalization }}</label>\\n                <input type=\\\"text\\\" id=\\\"phone-number\\\" class=\\\"form-control\\\" formControlName=\\\"phoneNumber\\\" />\\n              </div>\\n\\n              <div class=\\\"custom-checkbox custom-control mb-2\\\">\\n                <input\\n                  type=\\\"checkbox\\\"\\n                  id=\\\"lockout-checkbox\\\"\\n                  class=\\\"custom-control-input\\\"\\n                  formControlName=\\\"lockoutEnabled\\\"\\n                />\\n                <label class=\\\"custom-control-label\\\" for=\\\"lockout-checkbox\\\">{{\\n                  'AbpIdentity::DisplayName:LockoutEnabled' | abpLocalization\\n                }}</label>\\n              </div>\\n\\n              <div class=\\\"custom-checkbox custom-control mb-2\\\">\\n                <input\\n                  type=\\\"checkbox\\\"\\n                  id=\\\"two-factor-checkbox\\\"\\n                  class=\\\"custom-control-input\\\"\\n                  formControlName=\\\"twoFactorEnabled\\\"\\n                />\\n                <label class=\\\"custom-control-label\\\" for=\\\"two-factor-checkbox\\\">{{\\n                  'AbpIdentity::DisplayName:TwoFactorEnabled' | abpLocalization\\n                }}</label>\\n              </div>\\n            </div>\\n          </ng-template>\\n        </ngb-tab>\\n        <ngb-tab [title]=\\\"'AbpIdentity::Roles' | abpLocalization\\\">\\n          <ng-template ngbTabContent>\\n            <div class=\\\"mt-2 fade-in-top\\\">\\n              <div\\n                *ngFor=\\\"let roleGroup of roleGroups; let i = index; trackBy: trackByFn\\\"\\n                class=\\\"custom-checkbox custom-control mb-2\\\"\\n              >\\n                <input\\n                  type=\\\"checkbox\\\"\\n                  name=\\\"Roles[0].IsAssigned\\\"\\n                  value=\\\"true\\\"\\n                  class=\\\"custom-control-input\\\"\\n                  [attr.id]=\\\"'roles-' + i\\\"\\n                  [formControl]=\\\"roleGroup.controls[roles[i].name]\\\"\\n                />\\n                <label class=\\\"custom-control-label\\\" [attr.for]=\\\"'roles-' + i\\\">{{ roles[i].name }}</label>\\n              </div>\\n            </div>\\n          </ng-template>\\n        </ngb-tab>\\n      </ngb-tabset>\\n    </form>\\n  </ng-template>\\n\\n  <ng-template #abpFooter>\\n    <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" #abpClose>\\n      {{ 'AbpIdentity::Cancel' | abpLocalization }}\\n    </button>\\n    <abp-button iconClass=\\\"fa fa-check\\\" (click)=\\\"save()\\\" [disabled]=\\\"form?.invalid\\\">{{\\n      'AbpIdentity::Save' | abpLocalization\\n    }}</abp-button>\\n  </ng-template>\\n</abp-modal>\\n\\n<abp-permission-management [(visible)]=\\\"visiblePermissions\\\" providerName=\\\"U\\\" [providerKey]=\\\"providerKey\\\">\\n</abp-permission-management>\\n\"\n            }] }\n];\n/** @nocollapse */\nUsersComponent.ctorParameters = () => [\n    { type: ConfirmationService },\n    { type: FormBuilder },\n    { type: Store }\n];\nUsersComponent.propDecorators = {\n    modalContent: [{ type: ViewChild, args: ['modalContent', { static: false },] }]\n};\n__decorate([\n    Select(IdentityState.getUsers),\n    __metadata(\"design:type\", Observable)\n], UsersComponent.prototype, \"data$\", void 0);\n__decorate([\n    Select(IdentityState.getUsersTotalCount),\n    __metadata(\"design:type\", Observable)\n], UsersComponent.prototype, \"totalCount$\", void 0);\nif (false) {\n    /** @type {?} */\n    UsersComponent.prototype.data$;\n    /** @type {?} */\n    UsersComponent.prototype.totalCount$;\n    /** @type {?} */\n    UsersComponent.prototype.modalContent;\n    /** @type {?} */\n    UsersComponent.prototype.form;\n    /** @type {?} */\n    UsersComponent.prototype.selected;\n    /** @type {?} */\n    UsersComponent.prototype.selectedUserRoles;\n    /** @type {?} */\n    UsersComponent.prototype.roles;\n    /** @type {?} */\n    UsersComponent.prototype.visiblePermissions;\n    /** @type {?} */\n    UsersComponent.prototype.providerKey;\n    /** @type {?} */\n    UsersComponent.prototype.pageQuery;\n    /** @type {?} */\n    UsersComponent.prototype.isModalVisible;\n    /** @type {?} */\n    UsersComponent.prototype.loading;\n    /** @type {?} */\n    UsersComponent.prototype.modalBusy;\n    /** @type {?} */\n    UsersComponent.prototype.sortOrder;\n    /** @type {?} */\n    UsersComponent.prototype.sortKey;\n    /** @type {?} */\n    UsersComponent.prototype.passwordRulesArr;\n    /** @type {?} */\n    UsersComponent.prototype.requiredPasswordLength;\n    /** @type {?} */\n    UsersComponent.prototype.trackByFn;\n    /**\n     * @type {?}\n     * @private\n     */\n    UsersComponent.prototype.confirmationService;\n    /**\n     * @type {?}\n     * @private\n     */\n    UsersComponent.prototype.fb;\n    /**\n     * @type {?}\n     * @private\n     */\n    UsersComponent.prototype.store;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/identity-routing.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nconst ɵ0 = { requiredPolicy: 'AbpIdentity.Roles' }, ɵ1 = { requiredPolicy: 'AbpIdentity.Users' };\n/** @type {?} */\nconst routes = [\n    { path: '', redirectTo: 'roles', pathMatch: 'full' },\n    {\n        path: '',\n        component: DynamicLayoutComponent,\n        canActivate: [AuthGuard, PermissionGuard],\n        children: [\n            {\n                path: 'roles',\n                component: RolesComponent,\n                data: ɵ0,\n            },\n            {\n                path: 'users',\n                component: UsersComponent,\n                data: ɵ1,\n            },\n        ],\n    },\n];\nclass IdentityRoutingModule {\n}\nIdentityRoutingModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [RouterModule.forChild(routes)],\n                exports: [RouterModule],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/identity.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass IdentityModule {\n}\nIdentityModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [RolesComponent, UsersComponent],\n                imports: [\n                    NgxsModule.forFeature([IdentityState]),\n                    CoreModule,\n                    IdentityRoutingModule,\n                    NgbTabsetModule,\n                    ThemeSharedModule,\n                    TableModule,\n                    NgbDropdownModule,\n                    PermissionManagementModule,\n                    NgxValidateCoreModule,\n                ],\n            },] }\n];\n/**\n *\n * @deprecated\n * @return {?}\n */\nfunction IdentityProviders() {\n    return [];\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/constants/routes.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n *\n * @deprecated\n * @type {?}\n */\nconst IDENTITY_ROUTES = {\n    routes: (/** @type {?} */ ([\n        {\n            name: 'AbpUiNavigation::Menu:Administration',\n            path: '',\n            order: 1,\n            wrapper: true,\n        },\n        {\n            name: 'AbpIdentity::Menu:IdentityManagement',\n            path: 'identity',\n            order: 1,\n            parentName: 'AbpUiNavigation::Menu:Administration',\n            layout: \"application\" /* application */,\n            iconClass: 'fa fa-id-card-o',\n            children: [\n                { path: 'roles', name: 'AbpIdentity::Roles', order: 2, requiredPolicy: 'AbpIdentity.Roles' },\n                { path: 'users', name: 'AbpIdentity::Users', order: 1, requiredPolicy: 'AbpIdentity.Users' },\n            ],\n        },\n    ])),\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/models/identity.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar Identity;\n(function (Identity) {\n    /**\n     * @record\n     */\n    function State() { }\n    Identity.State = State;\n    if (false) {\n        /** @type {?} */\n        State.prototype.roles;\n        /** @type {?} */\n        State.prototype.users;\n        /** @type {?} */\n        State.prototype.selectedRole;\n        /** @type {?} */\n        State.prototype.selectedUser;\n        /** @type {?} */\n        State.prototype.selectedUserRoles;\n    }\n    /**\n     * @record\n     */\n    function RoleSaveRequest() { }\n    Identity.RoleSaveRequest = RoleSaveRequest;\n    if (false) {\n        /** @type {?} */\n        RoleSaveRequest.prototype.name;\n        /** @type {?} */\n        RoleSaveRequest.prototype.isDefault;\n        /** @type {?} */\n        RoleSaveRequest.prototype.isPublic;\n    }\n    /**\n     * @record\n     */\n    function RoleItem() { }\n    Identity.RoleItem = RoleItem;\n    if (false) {\n        /** @type {?} */\n        RoleItem.prototype.isStatic;\n        /** @type {?} */\n        RoleItem.prototype.concurrencyStamp;\n        /** @type {?} */\n        RoleItem.prototype.id;\n    }\n    /**\n     * @record\n     */\n    function UserItem() { }\n    Identity.UserItem = UserItem;\n    if (false) {\n        /** @type {?} */\n        UserItem.prototype.tenantId;\n        /** @type {?} */\n        UserItem.prototype.emailConfirmed;\n        /** @type {?} */\n        UserItem.prototype.phoneNumberConfirmed;\n        /** @type {?} */\n        UserItem.prototype.isLockedOut;\n        /** @type {?} */\n        UserItem.prototype.concurrencyStamp;\n        /** @type {?} */\n        UserItem.prototype.id;\n    }\n    /**\n     * @record\n     */\n    function User() { }\n    Identity.User = User;\n    if (false) {\n        /** @type {?} */\n        User.prototype.userName;\n        /** @type {?} */\n        User.prototype.name;\n        /** @type {?} */\n        User.prototype.surname;\n        /** @type {?} */\n        User.prototype.email;\n        /** @type {?} */\n        User.prototype.phoneNumber;\n        /** @type {?} */\n        User.prototype.twoFactorEnabled;\n        /** @type {?} */\n        User.prototype.lockoutEnabled;\n    }\n    /**\n     * @record\n     */\n    function UserSaveRequest() { }\n    Identity.UserSaveRequest = UserSaveRequest;\n    if (false) {\n        /** @type {?} */\n        UserSaveRequest.prototype.password;\n        /** @type {?} */\n        UserSaveRequest.prototype.roleNames;\n    }\n})(Identity || (Identity = {}));\n\n/**\n * @fileoverview added by tsickle\n * Generated from: public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: abp-ng.identity.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { CreateRole, CreateUser, DeleteRole, DeleteUser, GetRoleById, GetRoles, GetUserById, GetUserRoles, GetUsers, IDENTITY_ROUTES, IdentityModule, IdentityProviders, IdentityService, IdentityState, RolesComponent, UpdateRole, UpdateUser, UsersComponent as ɵb, IdentityRoutingModule as ɵc };\n//# sourceMappingURL=abp-ng.identity.js.map\n","import { RestService, CoreModule } from '@abp/ng.core';\nimport { ThemeSharedModule } from '@abp/ng.theme.shared';\nimport { Injectable, ɵɵdefineInjectable, ɵɵinject, EventEmitter, Component, Renderer2, Input, Output, NgModule } from '@angular/core';\nimport { Action, Selector, State, Store, Select, NgxsModule } from '@ngxs/store';\nimport { __decorate, __metadata } from 'tslib';\nimport { Observable } from 'rxjs';\nimport { tap, map, take, finalize, pluck } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/actions/permission-management.actions.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass GetPermissions {\n    /**\n     * @param {?} payload\n     */\n    constructor(payload) {\n        this.payload = payload;\n    }\n}\nGetPermissions.type = '[PermissionManagement] Get Permissions';\nif (false) {\n    /** @type {?} */\n    GetPermissions.type;\n    /** @type {?} */\n    GetPermissions.prototype.payload;\n}\nclass UpdatePermissions {\n    /**\n     * @param {?} payload\n     */\n    constructor(payload) {\n        this.payload = payload;\n    }\n}\nUpdatePermissions.type = '[PermissionManagement] Update Permissions';\nif (false) {\n    /** @type {?} */\n    UpdatePermissions.type;\n    /** @type {?} */\n    UpdatePermissions.prototype.payload;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/services/permission-management.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass PermissionManagementService {\n    /**\n     * @param {?} rest\n     */\n    constructor(rest) {\n        this.rest = rest;\n    }\n    /**\n     * @param {?} params\n     * @return {?}\n     */\n    getPermissions(params) {\n        /** @type {?} */\n        const request = {\n            method: 'GET',\n            url: '/api/abp/permissions',\n            params,\n        };\n        return this.rest.request(request);\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    updatePermissions({ permissions, providerKey, providerName, }) {\n        /** @type {?} */\n        const request = {\n            method: 'PUT',\n            url: '/api/abp/permissions',\n            body: { permissions },\n            params: { providerKey, providerName },\n        };\n        return this.rest.request(request);\n    }\n}\nPermissionManagementService.decorators = [\n    { type: Injectable, args: [{\n                providedIn: 'root',\n            },] }\n];\n/** @nocollapse */\nPermissionManagementService.ctorParameters = () => [\n    { type: RestService }\n];\n/** @nocollapse */ PermissionManagementService.ngInjectableDef = ɵɵdefineInjectable({ factory: function PermissionManagementService_Factory() { return new PermissionManagementService(ɵɵinject(RestService)); }, token: PermissionManagementService, providedIn: \"root\" });\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    PermissionManagementService.prototype.rest;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/states/permission-management.state.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nlet PermissionManagementState = class PermissionManagementState {\n    /**\n     * @param {?} permissionManagementService\n     */\n    constructor(permissionManagementService) {\n        this.permissionManagementService = permissionManagementService;\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    static getPermissionGroups({ permissionRes }) {\n        return permissionRes.groups || [];\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    static getEntityDisplayName({ permissionRes }) {\n        return permissionRes.entityDisplayName;\n    }\n    /**\n     * @param {?} __0\n     * @param {?} __1\n     * @return {?}\n     */\n    permissionManagementGet({ patchState }, { payload }) {\n        return this.permissionManagementService.getPermissions(payload).pipe(tap((/**\n         * @param {?} permissionResponse\n         * @return {?}\n         */\n        permissionResponse => patchState({\n            permissionRes: permissionResponse,\n        }))));\n    }\n    /**\n     * @param {?} _\n     * @param {?} __1\n     * @return {?}\n     */\n    permissionManagementUpdate(_, { payload }) {\n        return this.permissionManagementService.updatePermissions(payload);\n    }\n};\nPermissionManagementState.ctorParameters = () => [\n    { type: PermissionManagementService }\n];\n__decorate([\n    Action(GetPermissions),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object, GetPermissions]),\n    __metadata(\"design:returntype\", void 0)\n], PermissionManagementState.prototype, \"permissionManagementGet\", null);\n__decorate([\n    Action(UpdatePermissions),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object, UpdatePermissions]),\n    __metadata(\"design:returntype\", void 0)\n], PermissionManagementState.prototype, \"permissionManagementUpdate\", null);\n__decorate([\n    Selector(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object]),\n    __metadata(\"design:returntype\", void 0)\n], PermissionManagementState, \"getPermissionGroups\", null);\n__decorate([\n    Selector(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object]),\n    __metadata(\"design:returntype\", String)\n], PermissionManagementState, \"getEntityDisplayName\", null);\nPermissionManagementState = __decorate([\n    State({\n        name: 'PermissionManagementState',\n        defaults: (/** @type {?} */ ({ permissionRes: {} })),\n    }),\n    __metadata(\"design:paramtypes\", [PermissionManagementService])\n], PermissionManagementState);\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    PermissionManagementState.prototype.permissionManagementService;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/permission-management.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass PermissionManagementComponent {\n    /**\n     * @param {?} store\n     * @param {?} renderer\n     */\n    constructor(store, renderer) {\n        this.store = store;\n        this.renderer = renderer;\n        this.hideBadges = false;\n        this.visibleChange = new EventEmitter();\n        this.permissions = [];\n        this.selectThisTab = false;\n        this.selectAllTab = false;\n        this.modalBusy = false;\n        this.trackByFn = (/**\n         * @param {?} _\n         * @param {?} item\n         * @return {?}\n         */\n        (_, item) => item.name);\n    }\n    /**\n     * @return {?}\n     */\n    get visible() {\n        return this._visible;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set visible(value) {\n        if (!this.selectedGroup)\n            return;\n        this._visible = value;\n        this.visibleChange.emit(value);\n        if (!value) {\n            this.selectedGroup = null;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    get selectedGroupPermissions$() {\n        return this.groups$.pipe(map((/**\n         * @param {?} groups\n         * @return {?}\n         */\n        groups => this.selectedGroup\n            ? groups.find((/**\n             * @param {?} group\n             * @return {?}\n             */\n            group => group.name === this.selectedGroup.name)).permissions\n            : [])), map((/**\n         * @param {?} permissions\n         * @return {?}\n         */\n        permissions => permissions.map((/**\n         * @param {?} permission\n         * @return {?}\n         */\n        permission => ((/** @type {?} */ (((/** @type {?} */ (Object.assign({}, permission, { margin: findMargin(permissions, permission), isGranted: this.permissions.find((/**\n             * @param {?} per\n             * @return {?}\n             */\n            per => per.name === permission.name)).isGranted }))))))))))));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() { }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    getChecked(name) {\n        return (this.permissions.find((/**\n         * @param {?} per\n         * @return {?}\n         */\n        per => per.name === name)) || { isGranted: false }).isGranted;\n    }\n    /**\n     * @param {?} grantedProviders\n     * @return {?}\n     */\n    isGrantedByOtherProviderName(grantedProviders) {\n        if (grantedProviders.length) {\n            return grantedProviders.findIndex((/**\n             * @param {?} p\n             * @return {?}\n             */\n            p => p.providerName !== this.providerName)) > -1;\n        }\n        return false;\n    }\n    /**\n     * @param {?} clickedPermission\n     * @param {?} value\n     * @return {?}\n     */\n    onClickCheckbox(clickedPermission, value) {\n        if (clickedPermission.isGranted &&\n            this.isGrantedByOtherProviderName(clickedPermission.grantedProviders))\n            return;\n        setTimeout((/**\n         * @return {?}\n         */\n        () => {\n            this.permissions = this.permissions.map((/**\n             * @param {?} per\n             * @return {?}\n             */\n            per => {\n                if (clickedPermission.name === per.name) {\n                    return Object.assign({}, per, { isGranted: !per.isGranted });\n                }\n                else if (clickedPermission.name === per.parentName && clickedPermission.isGranted) {\n                    return Object.assign({}, per, { isGranted: false });\n                }\n                else if (clickedPermission.parentName === per.name && !clickedPermission.isGranted) {\n                    return Object.assign({}, per, { isGranted: true });\n                }\n                return per;\n            }));\n            this.setTabCheckboxState();\n            this.setGrantCheckboxState();\n        }), 0);\n    }\n    /**\n     * @return {?}\n     */\n    setTabCheckboxState() {\n        this.selectedGroupPermissions$.pipe(take(1)).subscribe((/**\n         * @param {?} permissions\n         * @return {?}\n         */\n        permissions => {\n            /** @type {?} */\n            const selectedPermissions = permissions.filter((/**\n             * @param {?} per\n             * @return {?}\n             */\n            per => per.isGranted));\n            /** @type {?} */\n            const element = (/** @type {?} */ (document.querySelector('#select-all-in-this-tabs')));\n            if (selectedPermissions.length === permissions.length) {\n                element.indeterminate = false;\n                this.selectThisTab = true;\n            }\n            else if (selectedPermissions.length === 0) {\n                element.indeterminate = false;\n                this.selectThisTab = false;\n            }\n            else {\n                element.indeterminate = true;\n            }\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    setGrantCheckboxState() {\n        /** @type {?} */\n        const selectedAllPermissions = this.permissions.filter((/**\n         * @param {?} per\n         * @return {?}\n         */\n        per => per.isGranted));\n        /** @type {?} */\n        const checkboxElement = (/** @type {?} */ (document.querySelector('#select-all-in-all-tabs')));\n        if (selectedAllPermissions.length === this.permissions.length) {\n            checkboxElement.indeterminate = false;\n            this.selectAllTab = true;\n        }\n        else if (selectedAllPermissions.length === 0) {\n            checkboxElement.indeterminate = false;\n            this.selectAllTab = false;\n        }\n        else {\n            checkboxElement.indeterminate = true;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    onClickSelectThisTab() {\n        this.selectedGroupPermissions$.pipe(take(1)).subscribe((/**\n         * @param {?} permissions\n         * @return {?}\n         */\n        permissions => {\n            permissions.forEach((/**\n             * @param {?} permission\n             * @return {?}\n             */\n            permission => {\n                if (permission.isGranted && this.isGrantedByOtherProviderName(permission.grantedProviders))\n                    return;\n                /** @type {?} */\n                const index = this.permissions.findIndex((/**\n                 * @param {?} per\n                 * @return {?}\n                 */\n                per => per.name === permission.name));\n                this.permissions = [\n                    ...this.permissions.slice(0, index),\n                    Object.assign({}, this.permissions[index], { isGranted: !this.selectThisTab }),\n                    ...this.permissions.slice(index + 1),\n                ];\n            }));\n        }));\n        this.setGrantCheckboxState();\n    }\n    /**\n     * @return {?}\n     */\n    onClickSelectAll() {\n        this.permissions = this.permissions.map((/**\n         * @param {?} permission\n         * @return {?}\n         */\n        permission => (Object.assign({}, permission, { isGranted: this.isGrantedByOtherProviderName(permission.grantedProviders) || !this.selectAllTab }))));\n        this.selectThisTab = !this.selectAllTab;\n    }\n    /**\n     * @param {?} group\n     * @return {?}\n     */\n    onChangeGroup(group) {\n        this.selectedGroup = group;\n        this.setTabCheckboxState();\n    }\n    /**\n     * @return {?}\n     */\n    submit() {\n        this.modalBusy = true;\n        /** @type {?} */\n        const unchangedPermissions = getPermissions(this.store.selectSnapshot(PermissionManagementState.getPermissionGroups));\n        /** @type {?} */\n        const changedPermissions = this.permissions\n            .filter((/**\n         * @param {?} per\n         * @return {?}\n         */\n        per => unchangedPermissions.find((/**\n         * @param {?} unchanged\n         * @return {?}\n         */\n        unchanged => unchanged.name === per.name)).isGranted ===\n            per.isGranted\n            ? false\n            : true))\n            .map((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ({ name, isGranted }) => ({ name, isGranted })));\n        if (changedPermissions.length) {\n            this.store\n                .dispatch(new UpdatePermissions({\n                providerKey: this.providerKey,\n                providerName: this.providerName,\n                permissions: changedPermissions,\n            }))\n                .pipe(finalize((/**\n             * @return {?}\n             */\n            () => (this.modalBusy = false))))\n                .subscribe((/**\n             * @return {?}\n             */\n            () => {\n                this.visible = false;\n            }));\n        }\n        else {\n            this.modalBusy = false;\n            this.visible = false;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    openModal() {\n        if (!this.providerKey || !this.providerName) {\n            throw new Error('Provider Key and Provider Name are required.');\n        }\n        this.store\n            .dispatch(new GetPermissions({\n            providerKey: this.providerKey,\n            providerName: this.providerName,\n        }))\n            .pipe(pluck('PermissionManagementState', 'permissionRes'))\n            .subscribe((/**\n         * @param {?} permissionRes\n         * @return {?}\n         */\n        (permissionRes) => {\n            this.selectedGroup = permissionRes.groups[0];\n            this.permissions = getPermissions(permissionRes.groups);\n            this.visible = true;\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    initModal() {\n        this.setTabCheckboxState();\n        this.setGrantCheckboxState();\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    ngOnChanges({ visible }) {\n        if (!visible)\n            return;\n        if (visible.currentValue) {\n            this.openModal();\n        }\n        else if (visible.currentValue === false && this.visible) {\n            this.visible = false;\n        }\n    }\n}\nPermissionManagementComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'abp-permission-management',\n                template: \"<abp-modal [(visible)]=\\\"visible\\\" (init)=\\\"initModal()\\\" [busy]=\\\"modalBusy\\\">\\n  <ng-container *ngIf=\\\"{ entityName: entityName$ | async } as data\\\">\\n    <ng-template #abpHeader>\\n      <h4>\\n        {{ 'AbpPermissionManagement::Permissions' | abpLocalization }} - {{ data.entityName }}\\n      </h4>\\n    </ng-template>\\n    <ng-template #abpBody>\\n      <div class=\\\"custom-checkbox custom-control mb-2\\\">\\n        <input\\n          type=\\\"checkbox\\\"\\n          id=\\\"select-all-in-all-tabs\\\"\\n          name=\\\"select-all-in-all-tabs\\\"\\n          class=\\\"custom-control-input\\\"\\n          [(ngModel)]=\\\"selectAllTab\\\"\\n          (click)=\\\"onClickSelectAll()\\\"\\n        />\\n        <label class=\\\"custom-control-label\\\" for=\\\"select-all-in-all-tabs\\\">{{\\n          'AbpPermissionManagement::SelectAllInAllTabs' | abpLocalization\\n        }}</label>\\n      </div>\\n\\n      <hr class=\\\"mt-2 mb-2\\\" />\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-4\\\">\\n          <ul class=\\\"nav nav-pills flex-column\\\">\\n            <li *ngFor=\\\"let group of groups$ | async; trackBy: trackByFn\\\" class=\\\"nav-item\\\">\\n              <a\\n                class=\\\"nav-link pointer\\\"\\n                [class.active]=\\\"selectedGroup?.name === group?.name\\\"\\n                (click)=\\\"onChangeGroup(group)\\\"\\n                >{{ group?.displayName }}</a\\n              >\\n            </li>\\n          </ul>\\n        </div>\\n        <div class=\\\"col-8\\\">\\n          <h4>{{ selectedGroup?.displayName }}</h4>\\n          <hr class=\\\"mt-2 mb-3\\\" />\\n          <div class=\\\"pl-1 pt-1\\\">\\n            <div class=\\\"custom-checkbox custom-control mb-2\\\">\\n              <input\\n                type=\\\"checkbox\\\"\\n                id=\\\"select-all-in-this-tabs\\\"\\n                name=\\\"select-all-in-this-tabs\\\"\\n                class=\\\"custom-control-input\\\"\\n                [(ngModel)]=\\\"selectThisTab\\\"\\n                (click)=\\\"onClickSelectThisTab()\\\"\\n              />\\n              <label class=\\\"custom-control-label\\\" for=\\\"select-all-in-this-tabs\\\">{{\\n                'AbpPermissionManagement::SelectAllInThisTab' | abpLocalization\\n              }}</label>\\n            </div>\\n            <hr class=\\\"mb-3\\\" />\\n            <div\\n              *ngFor=\\\"\\n                let permission of selectedGroupPermissions$ | async;\\n                let i = index;\\n                trackBy: trackByFn\\n              \\\"\\n              [style.margin-left]=\\\"permission.margin + 'px'\\\"\\n              class=\\\"custom-checkbox custom-control mb-2\\\"\\n            >\\n              <input\\n                #permissionCheckbox\\n                type=\\\"checkbox\\\"\\n                [checked]=\\\"getChecked(permission.name)\\\"\\n                [value]=\\\"getChecked(permission.name)\\\"\\n                [attr.id]=\\\"permission.name\\\"\\n                class=\\\"custom-control-input\\\"\\n                [disabled]=\\\"isGrantedByOtherProviderName(permission.grantedProviders)\\\"\\n              />\\n              <label\\n                class=\\\"custom-control-label\\\"\\n                [attr.for]=\\\"permission.name\\\"\\n                (click)=\\\"onClickCheckbox(permission, permissionCheckbox.value)\\\"\\n                >{{ permission.displayName }}\\n                <ng-container *ngIf=\\\"!hideBadges\\\">\\n                  <span\\n                    *ngFor=\\\"let provider of permission.grantedProviders\\\"\\n                    class=\\\"badge badge-light\\\"\\n                    >{{ provider.providerName }}: {{ provider.providerKey }}</span\\n                  >\\n                </ng-container>\\n              </label>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    </ng-template>\\n    <ng-template #abpFooter>\\n      <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" #abpClose>\\n        {{ 'AbpIdentity::Cancel' | abpLocalization }}\\n      </button>\\n      <abp-button iconClass=\\\"fa fa-check\\\" (click)=\\\"submit()\\\">{{\\n        'AbpIdentity::Save' | abpLocalization\\n      }}</abp-button>\\n    </ng-template>\\n  </ng-container>\\n</abp-modal>\\n\"\n            }] }\n];\n/** @nocollapse */\nPermissionManagementComponent.ctorParameters = () => [\n    { type: Store },\n    { type: Renderer2 }\n];\nPermissionManagementComponent.propDecorators = {\n    providerName: [{ type: Input }],\n    providerKey: [{ type: Input }],\n    hideBadges: [{ type: Input }],\n    visible: [{ type: Input }],\n    visibleChange: [{ type: Output }]\n};\n__decorate([\n    Select(PermissionManagementState.getPermissionGroups),\n    __metadata(\"design:type\", Observable)\n], PermissionManagementComponent.prototype, \"groups$\", void 0);\n__decorate([\n    Select(PermissionManagementState.getEntityDisplayName),\n    __metadata(\"design:type\", Observable)\n], PermissionManagementComponent.prototype, \"entityName$\", void 0);\nif (false) {\n    /** @type {?} */\n    PermissionManagementComponent.prototype.providerName;\n    /** @type {?} */\n    PermissionManagementComponent.prototype.providerKey;\n    /** @type {?} */\n    PermissionManagementComponent.prototype.hideBadges;\n    /**\n     * @type {?}\n     * @protected\n     */\n    PermissionManagementComponent.prototype._visible;\n    /** @type {?} */\n    PermissionManagementComponent.prototype.visibleChange;\n    /** @type {?} */\n    PermissionManagementComponent.prototype.groups$;\n    /** @type {?} */\n    PermissionManagementComponent.prototype.entityName$;\n    /** @type {?} */\n    PermissionManagementComponent.prototype.selectedGroup;\n    /** @type {?} */\n    PermissionManagementComponent.prototype.permissions;\n    /** @type {?} */\n    PermissionManagementComponent.prototype.selectThisTab;\n    /** @type {?} */\n    PermissionManagementComponent.prototype.selectAllTab;\n    /** @type {?} */\n    PermissionManagementComponent.prototype.modalBusy;\n    /** @type {?} */\n    PermissionManagementComponent.prototype.trackByFn;\n    /**\n     * @type {?}\n     * @private\n     */\n    PermissionManagementComponent.prototype.store;\n    /**\n     * @type {?}\n     * @private\n     */\n    PermissionManagementComponent.prototype.renderer;\n}\n/**\n * @param {?} permissions\n * @param {?} permission\n * @return {?}\n */\nfunction findMargin(permissions, permission) {\n    /** @type {?} */\n    const parentPermission = permissions.find((/**\n     * @param {?} per\n     * @return {?}\n     */\n    per => per.name === permission.parentName));\n    if (parentPermission && parentPermission.parentName) {\n        /** @type {?} */\n        let margin = 20;\n        return (margin += findMargin(permissions, parentPermission));\n    }\n    return parentPermission ? 20 : 0;\n}\n/**\n * @param {?} groups\n * @return {?}\n */\nfunction getPermissions(groups) {\n    return groups.reduce((/**\n     * @param {?} acc\n     * @param {?} val\n     * @return {?}\n     */\n    (acc, val) => [...acc, ...val.permissions]), []);\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/permission-management.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass PermissionManagementModule {\n}\nPermissionManagementModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [PermissionManagementComponent],\n                imports: [CoreModule, ThemeSharedModule, NgxsModule.forFeature([PermissionManagementState])],\n                exports: [PermissionManagementComponent],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/actions/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/models/permission-management.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar PermissionManagement;\n(function (PermissionManagement) {\n    /**\n     * @record\n     */\n    function State() { }\n    PermissionManagement.State = State;\n    if (false) {\n        /** @type {?} */\n        State.prototype.permissionRes;\n    }\n    /**\n     * @record\n     */\n    function Response() { }\n    PermissionManagement.Response = Response;\n    if (false) {\n        /** @type {?} */\n        Response.prototype.entityDisplayName;\n        /** @type {?} */\n        Response.prototype.groups;\n    }\n    /**\n     * @record\n     */\n    function Group() { }\n    PermissionManagement.Group = Group;\n    if (false) {\n        /** @type {?} */\n        Group.prototype.name;\n        /** @type {?} */\n        Group.prototype.displayName;\n        /** @type {?} */\n        Group.prototype.permissions;\n    }\n    /**\n     * @record\n     */\n    function MinimumPermission() { }\n    PermissionManagement.MinimumPermission = MinimumPermission;\n    if (false) {\n        /** @type {?} */\n        MinimumPermission.prototype.name;\n        /** @type {?} */\n        MinimumPermission.prototype.isGranted;\n    }\n    /**\n     * @record\n     */\n    function Permission() { }\n    PermissionManagement.Permission = Permission;\n    if (false) {\n        /** @type {?} */\n        Permission.prototype.displayName;\n        /** @type {?} */\n        Permission.prototype.parentName;\n        /** @type {?} */\n        Permission.prototype.allowedProviders;\n        /** @type {?} */\n        Permission.prototype.grantedProviders;\n    }\n    /**\n     * @record\n     */\n    function GrantedProvider() { }\n    PermissionManagement.GrantedProvider = GrantedProvider;\n    if (false) {\n        /** @type {?} */\n        GrantedProvider.prototype.providerName;\n        /** @type {?} */\n        GrantedProvider.prototype.providerKey;\n    }\n    /**\n     * @record\n     */\n    function UpdateRequest() { }\n    PermissionManagement.UpdateRequest = UpdateRequest;\n    if (false) {\n        /** @type {?} */\n        UpdateRequest.prototype.permissions;\n    }\n})(PermissionManagement || (PermissionManagement = {}));\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/models/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/services/permission-management-state.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass PermissionManagementStateService {\n    /**\n     * @param {?} store\n     */\n    constructor(store) {\n        this.store = store;\n    }\n    /**\n     * @return {?}\n     */\n    getPermissionGroups() {\n        return this.store.selectSnapshot(PermissionManagementState.getPermissionGroups);\n    }\n    /**\n     * @return {?}\n     */\n    getEntityDisplayName() {\n        return this.store.selectSnapshot(PermissionManagementState.getEntityDisplayName);\n    }\n}\nPermissionManagementStateService.decorators = [\n    { type: Injectable, args: [{\n                providedIn: 'root',\n            },] }\n];\n/** @nocollapse */\nPermissionManagementStateService.ctorParameters = () => [\n    { type: Store }\n];\n/** @nocollapse */ PermissionManagementStateService.ngInjectableDef = ɵɵdefineInjectable({ factory: function PermissionManagementStateService_Factory() { return new PermissionManagementStateService(ɵɵinject(Store)); }, token: PermissionManagementStateService, providedIn: \"root\" });\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    PermissionManagementStateService.prototype.store;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/services/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/states/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: abp-ng.permission-management.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { GetPermissions, PermissionManagementComponent, PermissionManagementModule, PermissionManagementService, PermissionManagementState, PermissionManagementStateService, UpdatePermissions, PermissionManagementComponent as ɵa, PermissionManagementState as ɵb, PermissionManagementService as ɵc, GetPermissions as ɵd, UpdatePermissions as ɵe };\n//# sourceMappingURL=abp-ng.permission-management.js.map\n","import { NgModule } from '@angular/core';\nimport { IdentityModule } from '@abp/ng.identity';\n\n@NgModule({\n  imports: [IdentityModule],\n})\nexport class IdentityWrapperModule {}\n"],"sourceRoot":"webpack:///"}