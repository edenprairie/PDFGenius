{"version":3,"sources":["./node_modules/@abp/ng.account/fesm2015/abp-ng.account.js","./src/app/lazy-libs/account-wrapper.module.ts"],"names":[],"mappings":"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CA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb;AACA,KAAK,mDAAmD;AACxD;AACA;AACA,mBAAmB,mEAAsB;AACzC;AACA,aAAa,2CAA2C;AACxD,aAAa,iDAAiD;AAC9D;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB,0BAA0B,4DAAY;AACtC,0BAA0B,4DAAY;AACtC,aAAa;AACb;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,OAAO,uEAAuE,GAAG,yDAAU;AAC3F,WAAW,EAAE;AACb;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,cAAc,MAAM;AACpB,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,wDAAwD,wDAAW;AACnE,mBAAmB,EAAE;AACrB,6CAA6C,EAAE;AAC/C,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,2EAAgB;AAC7D,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB,0BAA0B,2EAAgB,mEAAmE;AAC9H;AACA,SAAS;AACT,yBAAyB,2EAAgB;AACzC,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,2DAAc;AACxC;AACA;AACA,SAAS;AACT,kBAAkB,gEAAQ;AAC1B,oBAAoB;AACpB;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,8FAA8F,aAAa;AAC3G,aAAa;AACb;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACx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ACA,aAAa;AACb;AACA;AACA,sBAAsB,OAAO,mDAAK,EAAE;AACpC,wBAAwB,OAAO,mDAAK,EAAE;AACtC;AACA,WAAW,EAKV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,uDAAU,wBAAwB,sEAAiB,EAAE,yDAAW,EAAE,4EAAiB,EAAE,wEAAqB;AACpI;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,YAAY;AACZ;AACA,gDAAgD,EAAE,OAAO;AACzD;AACA,SAAS,8CAA8C;AACvD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,wBAAwB,EAAE;AAC1B;AACA;AACA;AACA;AACA;AACA,wBAAwB,yCAAyC,GAAG,+CAA+C;AACnH,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,oBAAoB;AACpB,WAAW,EAGV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,WAAW,EASV;AACD;AACA;AACA;AACA,6BAA6B;AAC7B,WAAW,EAyCV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,WAAW,EAKV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAE6e;AAC7e;;;;;;;;;;;;;;;;;;;ACr+ByC;AACO;AAKhD,IAAa,oBAAoB,GAAjC,MAAa,oBAAoB;CAAG;AAAvB,oBAAoB;IAHhC,8DAAQ,CAAC;QACR,OAAO,EAAE,CAAC,6DAAa,CAAC;KACzB,CAAC;GACW,oBAAoB,CAAG;AAAH","file":"lazy-libs-account-wrapper-module-es2015.js","sourcesContent":["import { ConfigState, SessionState, GetAppConfiguration, RestService, DynamicLayoutComponent, ChangePassword, GetProfile, UpdateProfile, ProfileState, SetTenant, CoreModule } from '@abp/ng.core';\nimport { ToasterService, fadeIn, ThemeSharedModule } from '@abp/ng.theme.shared';\nimport { Component, Optional, Inject, Injectable, ɵɵdefineInjectable, ɵɵinject, NgModule, InjectionToken, Input } from '@angular/core';\nimport { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';\nimport { validatePassword, comparePasswords, NgxValidateCoreModule } from '@ngx-validate/core';\nimport { TableModule } from 'primeng/table';\nimport { RouterModule } from '@angular/router';\nimport { Validators, FormBuilder } from '@angular/forms';\nimport { Navigate } from '@ngxs/router-plugin';\nimport { Store, Select } from '@ngxs/store';\nimport { OAuthService } from 'angular-oauth2-oidc';\nimport { from, throwError, Observable } from 'rxjs';\nimport { switchMap, tap, catchError, finalize, take, withLatestFrom } from 'rxjs/operators';\nimport snq from 'snq';\nimport { HttpHeaders } from '@angular/common/http';\nimport { trigger, transition, useAnimation } from '@angular/animations';\nimport { __decorate, __metadata } from 'tslib';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/login/login.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nconst { maxLength, minLength, required } = Validators;\nclass LoginComponent {\n    /**\n     * @param {?} fb\n     * @param {?} oauthService\n     * @param {?} store\n     * @param {?} toasterService\n     * @param {?} options\n     */\n    constructor(fb, oauthService, store, toasterService, options) {\n        this.fb = fb;\n        this.oauthService = oauthService;\n        this.store = store;\n        this.toasterService = toasterService;\n        this.options = options;\n        this.oauthService.configure(this.store.selectSnapshot(ConfigState.getOne('environment')).oAuthConfig);\n        this.oauthService.loadDiscoveryDocument();\n        this.form = this.fb.group({\n            username: ['', [required, maxLength(255)]],\n            password: ['', [required, maxLength(32)]],\n            remember: [false],\n        });\n    }\n    /**\n     * @return {?}\n     */\n    onSubmit() {\n        if (this.form.invalid)\n            return;\n        // this.oauthService.setStorage(this.form.value.remember ? localStorage : sessionStorage);\n        this.inProgress = true;\n        /** @type {?} */\n        const tenant = this.store.selectSnapshot(SessionState.getTenant);\n        from(this.oauthService.fetchTokenUsingPasswordFlow(this.form.get('username').value, this.form.get('password').value, new HttpHeaders(Object.assign({}, (tenant && tenant.id && { __tenant: tenant.id })))))\n            .pipe(switchMap((/**\n         * @return {?}\n         */\n        () => this.store.dispatch(new GetAppConfiguration()))), tap((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const redirectUrl = snq((/**\n             * @return {?}\n             */\n            () => window.history.state)).redirectUrl || (this.options || {}).redirectUrl || '/';\n            this.store.dispatch(new Navigate([redirectUrl]));\n        })), catchError((/**\n         * @param {?} err\n         * @return {?}\n         */\n        err => {\n            this.toasterService.error(snq((/**\n             * @return {?}\n             */\n            () => err.error.error_description)) ||\n                snq((/**\n                 * @return {?}\n                 */\n                () => err.error.error.message), 'AbpAccount::DefaultErrorMessage'), 'Error', { life: 7000 });\n            return throwError(err);\n        })), finalize((/**\n         * @return {?}\n         */\n        () => (this.inProgress = false))))\n            .subscribe();\n    }\n}\nLoginComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'abp-login',\n                template: \"<abp-auth-wrapper [mainContentRef]=\\\"mainContentRef\\\" [cancelContentRef]=\\\"cancelContentRef\\\">\\n  <ng-template #mainContentRef>\\n    <h4>{{ 'AbpAccount::Login' | abpLocalization }}</h4>\\n    <strong>\\n      {{ 'AbpAccount::AreYouANewUser' | abpLocalization }}\\n      <a class=\\\"text-decoration-none\\\" routerLink=\\\"/account/register\\\">{{ 'AbpAccount::Register' | abpLocalization }}</a>\\n    </strong>\\n    <form [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit()\\\" validateOnSubmit class=\\\"mt-4\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"login-input-user-name-or-email-address\\\">{{\\n          'AbpAccount::UserNameOrEmailAddress' | abpLocalization\\n        }}</label>\\n        <input\\n          class=\\\"form-control\\\"\\n          type=\\\"text\\\"\\n          id=\\\"login-input-user-name-or-email-address\\\"\\n          formControlName=\\\"username\\\"\\n          autofocus\\n        />\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"login-input-password\\\">{{ 'AbpAccount::Password' | abpLocalization }}</label>\\n        <input class=\\\"form-control\\\" type=\\\"password\\\" id=\\\"login-input-password\\\" formControlName=\\\"password\\\" />\\n      </div>\\n      <div class=\\\"form-check\\\" validationTarget validationStyle>\\n        <label class=\\\"form-check-label\\\" for=\\\"login-input-remember-me\\\">\\n          <input class=\\\"form-check-input\\\" type=\\\"checkbox\\\" id=\\\"login-input-remember-me\\\" formControlName=\\\"remember\\\" />\\n          {{ 'AbpAccount::RememberMe' | abpLocalization }}\\n        </label>\\n      </div>\\n      <abp-button\\n        [loading]=\\\"inProgress\\\"\\n        buttonType=\\\"submit\\\"\\n        name=\\\"Action\\\"\\n        buttonClass=\\\"btn-block btn-lg mt-3 btn btn-primary\\\"\\n      >\\n        {{ 'AbpAccount::Login' | abpLocalization }}\\n      </abp-button>\\n    </form>\\n  </ng-template>\\n  <ng-template #cancelContentRef>\\n    <div class=\\\"card-footer text-center border-0\\\">\\n      <a routerLink=\\\"/\\\">\\n        <button type=\\\"button\\\" name=\\\"Action\\\" value=\\\"Cancel\\\" class=\\\"px-2 py-0 btn btn-link\\\">\\n          {{ 'AbpAccount::Cancel' | abpLocalization }}\\n        </button>\\n      </a>\\n    </div>\\n  </ng-template>\\n</abp-auth-wrapper>\\n\"\n            }] }\n];\n/** @nocollapse */\nLoginComponent.ctorParameters = () => [\n    { type: FormBuilder },\n    { type: OAuthService },\n    { type: Store },\n    { type: ToasterService },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: ['ACCOUNT_OPTIONS',] }] }\n];\nif (false) {\n    /** @type {?} */\n    LoginComponent.prototype.form;\n    /** @type {?} */\n    LoginComponent.prototype.inProgress;\n    /**\n     * @type {?}\n     * @private\n     */\n    LoginComponent.prototype.fb;\n    /**\n     * @type {?}\n     * @private\n     */\n    LoginComponent.prototype.oauthService;\n    /**\n     * @type {?}\n     * @private\n     */\n    LoginComponent.prototype.store;\n    /**\n     * @type {?}\n     * @private\n     */\n    LoginComponent.prototype.toasterService;\n    /**\n     * @type {?}\n     * @private\n     */\n    LoginComponent.prototype.options;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/manage-profile/manage-profile.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ManageProfileComponent {\n    constructor() {\n        this.selectedTab = 0;\n    }\n}\nManageProfileComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'abp-manage-profile',\n                template: \"<div id=\\\"AbpContentToolbar\\\"></div>\\n\\n<div class=\\\"card border-0 shadow-sm\\\">\\n  <div class=\\\"card-body\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-3\\\">\\n        <ul class=\\\"nav flex-column nav-pills\\\" id=\\\"nav-tab\\\" role=\\\"tablist\\\">\\n          <li class=\\\"nav-item\\\" (click)=\\\"selectedTab = 0\\\">\\n            <a class=\\\"nav-link\\\" [ngClass]=\\\"{ active: selectedTab === 0 }\\\" role=\\\"tab\\\" href=\\\"javascript:void(0)\\\">{{\\n              'AbpUi::ChangePassword' | abpLocalization\\n            }}</a>\\n          </li>\\n          <li class=\\\"nav-item\\\" (click)=\\\"selectedTab = 1\\\">\\n            <a class=\\\"nav-link\\\" [ngClass]=\\\"{ active: selectedTab === 1 }\\\" role=\\\"tab\\\" href=\\\"javascript:void(0)\\\">{{\\n              'AbpAccount::PersonalSettings' | abpLocalization\\n            }}</a>\\n          </li>\\n        </ul>\\n      </div>\\n      <div class=\\\"col-9\\\">\\n        <div class=\\\"tab-content\\\" *ngIf=\\\"selectedTab === 0\\\" [@fadeIn]>\\n          <div class=\\\"tab-pane active\\\" role=\\\"tabpanel\\\">\\n            <h4>\\n              {{ 'AbpIdentity::ChangePassword' | abpLocalization }}\\n              <hr />\\n            </h4>\\n            <abp-change-password-form></abp-change-password-form>\\n          </div>\\n        </div>\\n        <div class=\\\"tab-content\\\" *ngIf=\\\"selectedTab === 1\\\" [@fadeIn]>\\n          <div class=\\\"tab-pane active\\\" role=\\\"tabpanel\\\">\\n            <h4>\\n              {{ 'AbpIdentity::PersonalSettings' | abpLocalization }}\\n              <hr />\\n            </h4>\\n            <abp-personal-settings-form></abp-personal-settings-form>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\",\n                animations: [trigger('fadeIn', [transition(':enter', useAnimation(fadeIn))])]\n            }] }\n];\nif (false) {\n    /** @type {?} */\n    ManageProfileComponent.prototype.selectedTab;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/services/account.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass AccountService {\n    /**\n     * @param {?} rest\n     */\n    constructor(rest) {\n        this.rest = rest;\n    }\n    /**\n     * @param {?} tenantName\n     * @return {?}\n     */\n    findTenant(tenantName) {\n        /** @type {?} */\n        const request = {\n            method: 'GET',\n            url: `/api/abp/multi-tenancy/tenants/by-name/${tenantName}`,\n        };\n        return this.rest.request(request);\n    }\n    /**\n     * @param {?} body\n     * @return {?}\n     */\n    register(body) {\n        /** @type {?} */\n        const request = {\n            method: 'POST',\n            url: '/api/account/register',\n            body,\n        };\n        return this.rest.request(request, { skipHandleError: true });\n    }\n}\nAccountService.decorators = [\n    { type: Injectable, args: [{\n                providedIn: 'root',\n            },] }\n];\n/** @nocollapse */\nAccountService.ctorParameters = () => [\n    { type: RestService }\n];\n/** @nocollapse */ AccountService.ngInjectableDef = ɵɵdefineInjectable({ factory: function AccountService_Factory() { return new AccountService(ɵɵinject(RestService)); }, token: AccountService, providedIn: \"root\" });\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    AccountService.prototype.rest;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/register/register.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nconst { maxLength: maxLength$1, minLength: minLength$1, required: required$1, email } = Validators;\nclass RegisterComponent {\n    /**\n     * @param {?} fb\n     * @param {?} accountService\n     * @param {?} oauthService\n     * @param {?} store\n     * @param {?} toasterService\n     */\n    constructor(fb, accountService, oauthService, store, toasterService) {\n        this.fb = fb;\n        this.accountService = accountService;\n        this.oauthService = oauthService;\n        this.store = store;\n        this.toasterService = toasterService;\n        this.oauthService.configure(this.store.selectSnapshot(ConfigState.getOne('environment')).oAuthConfig);\n        this.oauthService.loadDiscoveryDocument();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        /** @type {?} */\n        const passwordRules = this.store.selectSnapshot(ConfigState.getSettings('Identity.Password'));\n        /** @type {?} */\n        const passwordRulesArr = (/** @type {?} */ ([]));\n        /** @type {?} */\n        let requiredLength = 1;\n        if ((passwordRules['Abp.Identity.Password.RequireDigit'] || '').toLowerCase() === 'true') {\n            passwordRulesArr.push('number');\n        }\n        if ((passwordRules['Abp.Identity.Password.RequireLowercase'] || '').toLowerCase() === 'true') {\n            passwordRulesArr.push('small');\n        }\n        if ((passwordRules['Abp.Identity.Password.RequireUppercase'] || '').toLowerCase() === 'true') {\n            passwordRulesArr.push('capital');\n        }\n        if (+(passwordRules['Abp.Identity.Password.RequiredUniqueChars'] || 0) > 0) {\n            passwordRulesArr.push('special');\n        }\n        if (Number.isInteger(+passwordRules['Abp.Identity.Password.RequiredLength'])) {\n            requiredLength = +passwordRules['Abp.Identity.Password.RequiredLength'];\n        }\n        this.form = this.fb.group({\n            username: ['', [required$1, maxLength$1(255)]],\n            password: [\n                '',\n                [required$1, validatePassword(passwordRulesArr), minLength$1(requiredLength), maxLength$1(32)],\n            ],\n            email: ['', [required$1, email]],\n        });\n    }\n    /**\n     * @return {?}\n     */\n    onSubmit() {\n        if (this.form.invalid)\n            return;\n        this.inProgress = true;\n        /** @type {?} */\n        const newUser = (/** @type {?} */ ({\n            userName: this.form.get('username').value,\n            password: this.form.get('password').value,\n            emailAddress: this.form.get('email').value,\n            appName: 'Angular',\n        }));\n        /** @type {?} */\n        const tenant = this.store.selectSnapshot(SessionState.getTenant);\n        this.accountService\n            .register(newUser)\n            .pipe(switchMap((/**\n         * @return {?}\n         */\n        () => from(this.oauthService.fetchTokenUsingPasswordFlow(newUser.userName, newUser.password, new HttpHeaders(Object.assign({}, (tenant && tenant.id && { __tenant: tenant.id }))))))), switchMap((/**\n         * @return {?}\n         */\n        () => this.store.dispatch(new GetAppConfiguration()))), tap((/**\n         * @return {?}\n         */\n        () => this.store.dispatch(new Navigate(['/'])))), take(1), catchError((/**\n         * @param {?} err\n         * @return {?}\n         */\n        err => {\n            this.toasterService.error(snq((/**\n             * @return {?}\n             */\n            () => err.error.error_description)) ||\n                snq((/**\n                 * @return {?}\n                 */\n                () => err.error.error.message), 'AbpAccount::DefaultErrorMessage'), 'Error', { life: 7000 });\n            return throwError(err);\n        })), finalize((/**\n         * @return {?}\n         */\n        () => (this.inProgress = false))))\n            .subscribe();\n    }\n}\nRegisterComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'abp-register',\n                template: \"<abp-auth-wrapper [mainContentRef]=\\\"mainContentRef\\\">\\n  <ng-template #mainContentRef>\\n    <h4>{{ 'AbpAccount::Register' | abpLocalization }}</h4>\\n    <strong>\\n      {{ 'AbpAccount::AlreadyRegistered' | abpLocalization }}\\n      <a class=\\\"text-decoration-none\\\" routerLink=\\\"/account/login\\\">{{ 'AbpAccount::Login' | abpLocalization }}</a>\\n    </strong>\\n    <form [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit()\\\" validateOnSubmit class=\\\"mt-4\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"input-user-name\\\">{{ 'AbpAccount::UserName' | abpLocalization }}</label\\n        ><span> * </span\\n        ><input autofocus type=\\\"text\\\" id=\\\"input-user-name\\\" class=\\\"form-control\\\" formControlName=\\\"username\\\" />\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"input-email-address\\\">{{ 'AbpAccount::EmailAddress' | abpLocalization }}</label\\n        ><span> * </span><input type=\\\"email\\\" id=\\\"input-email-address\\\" class=\\\"form-control\\\" formControlName=\\\"email\\\" />\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"input-password\\\">{{ 'AbpAccount::Password' | abpLocalization }}</label\\n        ><span> * </span><input type=\\\"password\\\" id=\\\"input-password\\\" class=\\\"form-control\\\" formControlName=\\\"password\\\" />\\n      </div>\\n      <abp-button\\n        [loading]=\\\"inProgress\\\"\\n        buttonType=\\\"submit\\\"\\n        name=\\\"Action\\\"\\n        buttonClass=\\\"btn-block btn-lg mt-3 btn btn-primary\\\"\\n      >\\n        {{ 'AbpAccount::Register' | abpLocalization }}\\n      </abp-button>\\n    </form>\\n  </ng-template>\\n</abp-auth-wrapper>\\n\"\n            }] }\n];\n/** @nocollapse */\nRegisterComponent.ctorParameters = () => [\n    { type: FormBuilder },\n    { type: AccountService },\n    { type: OAuthService },\n    { type: Store },\n    { type: ToasterService }\n];\nif (false) {\n    /** @type {?} */\n    RegisterComponent.prototype.form;\n    /** @type {?} */\n    RegisterComponent.prototype.inProgress;\n    /**\n     * @type {?}\n     * @private\n     */\n    RegisterComponent.prototype.fb;\n    /**\n     * @type {?}\n     * @private\n     */\n    RegisterComponent.prototype.accountService;\n    /**\n     * @type {?}\n     * @private\n     */\n    RegisterComponent.prototype.oauthService;\n    /**\n     * @type {?}\n     * @private\n     */\n    RegisterComponent.prototype.store;\n    /**\n     * @type {?}\n     * @private\n     */\n    RegisterComponent.prototype.toasterService;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/account-routing.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst routes = [\n    { path: '', pathMatch: 'full', redirectTo: 'login' },\n    {\n        path: '',\n        component: DynamicLayoutComponent,\n        children: [\n            { path: 'login', component: LoginComponent },\n            { path: 'register', component: RegisterComponent },\n            {\n                path: 'manage-profile',\n                component: ManageProfileComponent,\n            },\n        ],\n    },\n];\nclass AccountRoutingModule {\n}\nAccountRoutingModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [RouterModule.forChild(routes)],\n                exports: [RouterModule],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/change-password/change-password.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nconst { minLength: minLength$2, required: required$2, maxLength: maxLength$2 } = Validators;\n/** @type {?} */\nconst PASSWORD_FIELDS = ['newPassword', 'repeatNewPassword'];\nclass ChangePasswordComponent {\n    /**\n     * @param {?} fb\n     * @param {?} store\n     * @param {?} toasterService\n     */\n    constructor(fb, store, toasterService) {\n        this.fb = fb;\n        this.store = store;\n        this.toasterService = toasterService;\n        this.mapErrorsFn = (/**\n         * @param {?} errors\n         * @param {?} groupErrors\n         * @param {?} control\n         * @return {?}\n         */\n        (errors, groupErrors, control) => {\n            if (PASSWORD_FIELDS.indexOf(control.name) < 0)\n                return errors;\n            return errors.concat(groupErrors.filter((/**\n             * @param {?} __0\n             * @return {?}\n             */\n            ({ key }) => key === 'passwordMismatch')));\n        });\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        /** @type {?} */\n        const passwordRules = this.store.selectSnapshot(ConfigState.getSettings('Identity.Password'));\n        /** @type {?} */\n        const passwordRulesArr = (/** @type {?} */ ([]));\n        /** @type {?} */\n        let requiredLength = 1;\n        if ((passwordRules['Abp.Identity.Password.RequireDigit'] || '').toLowerCase() === 'true') {\n            passwordRulesArr.push('number');\n        }\n        if ((passwordRules['Abp.Identity.Password.RequireLowercase'] || '').toLowerCase() === 'true') {\n            passwordRulesArr.push('small');\n        }\n        if ((passwordRules['Abp.Identity.Password.RequireUppercase'] || '').toLowerCase() === 'true') {\n            passwordRulesArr.push('capital');\n        }\n        if (+(passwordRules['Abp.Identity.Password.RequiredUniqueChars'] || 0) > 0) {\n            passwordRulesArr.push('special');\n        }\n        if (Number.isInteger(+passwordRules['Abp.Identity.Password.RequiredLength'])) {\n            requiredLength = +passwordRules['Abp.Identity.Password.RequiredLength'];\n        }\n        this.form = this.fb.group({\n            password: ['', required$2],\n            newPassword: [\n                '',\n                {\n                    validators: [required$2, validatePassword(passwordRulesArr), minLength$2(requiredLength), maxLength$2(32)],\n                },\n            ],\n            repeatNewPassword: [\n                '',\n                { validators: [required$2, validatePassword(passwordRulesArr), minLength$2(requiredLength), maxLength$2(32)] },\n            ],\n        }, {\n            validators: [comparePasswords(PASSWORD_FIELDS)],\n        });\n    }\n    /**\n     * @return {?}\n     */\n    onSubmit() {\n        if (this.form.invalid)\n            return;\n        this.inProgress = true;\n        this.store\n            .dispatch(new ChangePassword({\n            currentPassword: this.form.get('password').value,\n            newPassword: this.form.get('newPassword').value,\n        }))\n            .pipe(finalize((/**\n         * @return {?}\n         */\n        () => (this.inProgress = false))))\n            .subscribe({\n            next: (/**\n             * @return {?}\n             */\n            () => {\n                this.form.reset();\n                this.toasterService.success('AbpAccount::PasswordChangedMessage', 'Success', { life: 5000 });\n            }),\n            error: (/**\n             * @param {?} err\n             * @return {?}\n             */\n            err => {\n                this.toasterService.error(snq((/**\n                 * @return {?}\n                 */\n                () => err.error.error.message), 'AbpAccount::DefaultErrorMessage'), 'Error', {\n                    life: 7000,\n                });\n            }),\n        });\n    }\n}\nChangePasswordComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'abp-change-password-form',\n                template: \"<form [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit()\\\" [mapErrorsFn]=\\\"mapErrorsFn\\\" validateOnSubmit>\\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"current-password\\\">{{ 'AbpIdentity::DisplayName:CurrentPassword' | abpLocalization }}</label\\n    ><span> * </span\\n    ><input type=\\\"password\\\" id=\\\"current-password\\\" class=\\\"form-control\\\" formControlName=\\\"password\\\" autofocus />\\n  </div>\\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"new-password\\\">{{ 'AbpIdentity::DisplayName:NewPassword' | abpLocalization }}</label\\n    ><span> * </span><input type=\\\"password\\\" id=\\\"new-password\\\" class=\\\"form-control\\\" formControlName=\\\"newPassword\\\" />\\n  </div>\\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"confirm-new-password\\\">{{ 'AbpIdentity::DisplayName:NewPasswordConfirm' | abpLocalization }}</label\\n    ><span> * </span\\n    ><input type=\\\"password\\\" id=\\\"confirm-new-password\\\" class=\\\"form-control\\\" formControlName=\\\"repeatNewPassword\\\" />\\n  </div>\\n  <abp-button\\n    iconClass=\\\"fa fa-check\\\"\\n    buttonClass=\\\"btn btn-primary color-white\\\"\\n    buttonType=\\\"submit\\\"\\n    [loading]=\\\"inProgress\\\"\\n    [disabled]=\\\"form?.invalid\\\"\\n    >{{ 'AbpIdentity::Save' | abpLocalization }}</abp-button\\n  >\\n</form>\\n\"\n            }] }\n];\n/** @nocollapse */\nChangePasswordComponent.ctorParameters = () => [\n    { type: FormBuilder },\n    { type: Store },\n    { type: ToasterService }\n];\nif (false) {\n    /** @type {?} */\n    ChangePasswordComponent.prototype.form;\n    /** @type {?} */\n    ChangePasswordComponent.prototype.inProgress;\n    /** @type {?} */\n    ChangePasswordComponent.prototype.mapErrorsFn;\n    /**\n     * @type {?}\n     * @private\n     */\n    ChangePasswordComponent.prototype.fb;\n    /**\n     * @type {?}\n     * @private\n     */\n    ChangePasswordComponent.prototype.store;\n    /**\n     * @type {?}\n     * @private\n     */\n    ChangePasswordComponent.prototype.toasterService;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/personal-settings/personal-settings.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nconst { maxLength: maxLength$3, required: required$3, email: email$1 } = Validators;\nclass PersonalSettingsComponent {\n    /**\n     * @param {?} fb\n     * @param {?} store\n     * @param {?} toasterService\n     */\n    constructor(fb, store, toasterService) {\n        this.fb = fb;\n        this.store = store;\n        this.toasterService = toasterService;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.buildForm();\n    }\n    /**\n     * @return {?}\n     */\n    buildForm() {\n        this.store\n            .dispatch(new GetProfile())\n            .pipe(withLatestFrom(this.profile$), take(1))\n            .subscribe((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ([, profile]) => {\n            this.form = this.fb.group({\n                userName: [profile.userName, [required$3, maxLength$3(256)]],\n                email: [profile.email, [required$3, email$1, maxLength$3(256)]],\n                name: [profile.name || '', [maxLength$3(64)]],\n                surname: [profile.surname || '', [maxLength$3(64)]],\n                phoneNumber: [profile.phoneNumber || '', [maxLength$3(16)]],\n            });\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    submit() {\n        if (this.form.invalid)\n            return;\n        this.inProgress = true;\n        this.store\n            .dispatch(new UpdateProfile(this.form.value))\n            .pipe(finalize((/**\n         * @return {?}\n         */\n        () => (this.inProgress = false))))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this.toasterService.success('AbpAccount::PersonalSettingsSaved', 'Success', { life: 5000 });\n        }));\n    }\n}\nPersonalSettingsComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'abp-personal-settings-form',\n                template: \"<form validateOnSubmit *ngIf=\\\"form\\\" [formGroup]=\\\"form\\\" (ngSubmit)=\\\"submit()\\\">\\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"username\\\">{{ 'AbpIdentity::DisplayName:UserName' | abpLocalization }}</label\\n    ><span> * </span\\n    ><input\\n      type=\\\"text\\\"\\n      id=\\\"username\\\"\\n      class=\\\"form-control\\\"\\n      formControlName=\\\"userName\\\"\\n      autofocus\\n      (keydown.space)=\\\"$event.preventDefault()\\\"\\n    />\\n  </div>\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col col-md-6\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"name\\\">{{ 'AbpIdentity::DisplayName:Name' | abpLocalization }}</label\\n        ><input type=\\\"text\\\" id=\\\"name\\\" class=\\\"form-control\\\" formControlName=\\\"name\\\" />\\n      </div>\\n    </div>\\n    <div class=\\\"col col-md-6\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"surname\\\">{{ 'AbpIdentity::DisplayName:Surname' | abpLocalization }}</label\\n        ><input type=\\\"text\\\" id=\\\"surname\\\" class=\\\"form-control\\\" formControlName=\\\"surname\\\" />\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"email-address\\\">{{ 'AbpIdentity::DisplayName:Email' | abpLocalization }}</label\\n    ><span> * </span><input type=\\\"text\\\" id=\\\"email-address\\\" class=\\\"form-control\\\" formControlName=\\\"email\\\" />\\n  </div>\\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"phone-number\\\">{{ 'AbpIdentity::DisplayName:PhoneNumber' | abpLocalization }}</label\\n    ><input type=\\\"text\\\" id=\\\"phone-number\\\" class=\\\"form-control\\\" formControlName=\\\"phoneNumber\\\" />\\n  </div>\\n  <abp-button\\n    buttonType=\\\"submit\\\"\\n    iconClass=\\\"fa fa-check\\\"\\n    buttonClass=\\\"btn btn-primary color-white\\\"\\n    [loading]=\\\"inProgress\\\"\\n    [disabled]=\\\"form?.invalid || form?.pristine\\\"\\n  >\\n    {{ 'AbpIdentity::Save' | abpLocalization }}</abp-button\\n  >\\n</form>\\n\"\n            }] }\n];\n/** @nocollapse */\nPersonalSettingsComponent.ctorParameters = () => [\n    { type: FormBuilder },\n    { type: Store },\n    { type: ToasterService }\n];\n__decorate([\n    Select(ProfileState.getProfile),\n    __metadata(\"design:type\", Observable)\n], PersonalSettingsComponent.prototype, \"profile$\", void 0);\nif (false) {\n    /** @type {?} */\n    PersonalSettingsComponent.prototype.profile$;\n    /** @type {?} */\n    PersonalSettingsComponent.prototype.form;\n    /** @type {?} */\n    PersonalSettingsComponent.prototype.inProgress;\n    /**\n     * @type {?}\n     * @private\n     */\n    PersonalSettingsComponent.prototype.fb;\n    /**\n     * @type {?}\n     * @private\n     */\n    PersonalSettingsComponent.prototype.store;\n    /**\n     * @type {?}\n     * @private\n     */\n    PersonalSettingsComponent.prototype.toasterService;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/tenant-box/tenant-box.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass TenantBoxComponent {\n    /**\n     * @param {?} store\n     * @param {?} toasterService\n     * @param {?} accountService\n     */\n    constructor(store, toasterService, accountService) {\n        this.store = store;\n        this.toasterService = toasterService;\n        this.accountService = accountService;\n        this.tenant = (/** @type {?} */ ({}));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.tenant = this.store.selectSnapshot(SessionState.getTenant) || ((/** @type {?} */ ({})));\n        this.tenantName = this.tenant.name || '';\n    }\n    /**\n     * @return {?}\n     */\n    onSwitch() {\n        this.isModalVisible = true;\n    }\n    /**\n     * @return {?}\n     */\n    save() {\n        if (this.tenant.name && !this.inProgress) {\n            this.inProgress = true;\n            this.accountService\n                .findTenant(this.tenant.name)\n                .pipe(finalize((/**\n             * @return {?}\n             */\n            () => (this.inProgress = false))), take(1), catchError((/**\n             * @param {?} err\n             * @return {?}\n             */\n            err => {\n                this.toasterService.error(snq((/**\n                 * @return {?}\n                 */\n                () => err.error.error_description), 'AbpUi::DefaultErrorMessage'), 'AbpUi::Error');\n                return throwError(err);\n            })))\n                .subscribe((/**\n             * @param {?} __0\n             * @return {?}\n             */\n            ({ success, tenantId }) => {\n                if (success) {\n                    this.tenant = {\n                        id: tenantId,\n                        name: this.tenant.name,\n                    };\n                    this.tenantName = this.tenant.name;\n                    this.isModalVisible = false;\n                }\n                else {\n                    this.toasterService.error('AbpUiMultiTenancy::GivenTenantIsNotAvailable', 'AbpUi::Error', {\n                        messageLocalizationParams: [this.tenant.name],\n                    });\n                    this.tenant = (/** @type {?} */ ({}));\n                }\n                this.store.dispatch(new SetTenant(success ? this.tenant : null));\n            }));\n        }\n        else {\n            this.store.dispatch(new SetTenant(null));\n            this.tenantName = null;\n            this.isModalVisible = false;\n        }\n    }\n}\nTenantBoxComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'abp-tenant-box',\n                template: \"<div class=\\\"card shadow-sm rounded mb-3\\\">\\n  <div class=\\\"card-body px-5\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col\\\">\\n        <span style=\\\"font-size: 0.8em;\\\" class=\\\"text-uppercase text-muted\\\">{{\\n          'AbpUiMultiTenancy::Tenant' | abpLocalization\\n        }}</span\\n        ><br />\\n        <h6 class=\\\"m-0 d-inline-block\\\">\\n          <span>\\n            {{ tenantName || ('AbpUiMultiTenancy::NotSelected' | abpLocalization) }}\\n          </span>\\n        </h6>\\n      </div>\\n      <div class=\\\"col-auto\\\">\\n        <a\\n          id=\\\"AbpTenantSwitchLink\\\"\\n          href=\\\"javascript:void(0);\\\"\\n          class=\\\"btn btn-sm mt-3 btn-outline-primary\\\"\\n          (click)=\\\"onSwitch()\\\"\\n          >{{ 'AbpUiMultiTenancy::Switch' | abpLocalization }}</a\\n        >\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\\n<abp-modal size=\\\"md\\\" [(visible)]=\\\"isModalVisible\\\" [busy]=\\\"inProgress\\\">\\n  <ng-template #abpHeader>\\n    <h5>Switch Tenant</h5>\\n  </ng-template>\\n  <ng-template #abpBody>\\n    <form (ngSubmit)=\\\"save()\\\">\\n      <div class=\\\"mt-2\\\">\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"name\\\">{{ 'AbpUiMultiTenancy::Name' | abpLocalization }}</label>\\n          <input [(ngModel)]=\\\"tenant.name\\\" type=\\\"text\\\" id=\\\"name\\\" name=\\\"tenant\\\" class=\\\"form-control\\\" autofocus />\\n        </div>\\n        <p>{{ 'AbpUiMultiTenancy::SwitchTenantHint' | abpLocalization }}</p>\\n      </div>\\n    </form>\\n  </ng-template>\\n  <ng-template #abpFooter>\\n    <button #abpClose type=\\\"button\\\" class=\\\"btn btn-secondary\\\">\\n      {{ 'AbpTenantManagement::Cancel' | abpLocalization }}\\n    </button>\\n    <abp-button buttonType=\\\"button\\\" buttonClass=\\\"btn btn-primary\\\" (click)=\\\"save()\\\">\\n      <i class=\\\"fa fa-check mr-1\\\"></i> <span>{{ 'AbpTenantManagement::Save' | abpLocalization }}</span>\\n    </abp-button>\\n  </ng-template>\\n</abp-modal>\\n\"\n            }] }\n];\n/** @nocollapse */\nTenantBoxComponent.ctorParameters = () => [\n    { type: Store },\n    { type: ToasterService },\n    { type: AccountService }\n];\nif (false) {\n    /** @type {?} */\n    TenantBoxComponent.prototype.tenant;\n    /** @type {?} */\n    TenantBoxComponent.prototype.tenantName;\n    /** @type {?} */\n    TenantBoxComponent.prototype.isModalVisible;\n    /** @type {?} */\n    TenantBoxComponent.prototype.inProgress;\n    /**\n     * @type {?}\n     * @private\n     */\n    TenantBoxComponent.prototype.store;\n    /**\n     * @type {?}\n     * @private\n     */\n    TenantBoxComponent.prototype.toasterService;\n    /**\n     * @type {?}\n     * @private\n     */\n    TenantBoxComponent.prototype.accountService;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/tokens/options.token.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} options\n * @return {?}\n */\nfunction optionsFactory(options) {\n    return Object.assign({ redirectUrl: '/' }, options);\n}\n/** @type {?} */\nconst ACCOUNT_OPTIONS = new InjectionToken('ACCOUNT_OPTIONS');\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/auth-wrapper/auth-wrapper.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass AuthWrapperComponent {\n}\nAuthWrapperComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'abp-auth-wrapper',\n                template: \"<div class=\\\"row\\\">\\n  <div class=\\\"mx-auto col col-md-5\\\">\\n    <abp-tenant-box></abp-tenant-box>\\n\\n    <div class=\\\"abp-account-container\\\">\\n      <div class=\\\"card mt-3 shadow-sm rounded\\\">\\n        <div class=\\\"card-body p-5\\\">\\n          <ng-content *ngTemplateOutlet=\\\"mainContentRef\\\"></ng-content>\\n        </div>\\n        <ng-content *ngTemplateOutlet=\\\"cancelContentRef\\\"></ng-content>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"\n            }] }\n];\nAuthWrapperComponent.propDecorators = {\n    mainContentRef: [{ type: Input }],\n    cancelContentRef: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    AuthWrapperComponent.prototype.mainContentRef;\n    /** @type {?} */\n    AuthWrapperComponent.prototype.cancelContentRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/account.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass AccountModule {\n}\nAccountModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [\n                    AuthWrapperComponent,\n                    LoginComponent,\n                    RegisterComponent,\n                    TenantBoxComponent,\n                    ChangePasswordComponent,\n                    ManageProfileComponent,\n                    PersonalSettingsComponent,\n                ],\n                imports: [CoreModule, AccountRoutingModule, ThemeSharedModule, TableModule, NgbDropdownModule, NgxValidateCoreModule],\n                exports: [],\n            },] }\n];\n/**\n *\n * @deprecated since version 0.9\n * @param {?=} options\n * @return {?}\n */\nfunction AccountProviders(options = (/** @type {?} */ ({}))) {\n    return [\n        { provide: ACCOUNT_OPTIONS, useValue: options },\n        {\n            provide: 'ACCOUNT_OPTIONS',\n            useFactory: optionsFactory,\n            deps: [ACCOUNT_OPTIONS],\n        },\n    ];\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/constants/routes.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n *\n * @deprecated since version 0.9\n * @type {?}\n */\nconst ACCOUNT_ROUTES = {\n    routes: (/** @type {?} */ ([\n        {\n            name: 'Account',\n            path: 'account',\n            invisible: true,\n            layout: \"application\" /* application */,\n            children: [{ path: 'login', name: 'Login', order: 1 }, { path: 'register', name: 'Register', order: 2 }],\n        },\n    ])),\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/tokens/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/models/options.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction Options() { }\nif (false) {\n    /** @type {?|undefined} */\n    Options.prototype.redirectUrl;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/models/user.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction RegisterRequest() { }\nif (false) {\n    /** @type {?} */\n    RegisterRequest.prototype.userName;\n    /** @type {?} */\n    RegisterRequest.prototype.emailAddress;\n    /** @type {?} */\n    RegisterRequest.prototype.password;\n    /** @type {?|undefined} */\n    RegisterRequest.prototype.appName;\n}\n/**\n * @record\n */\nfunction RegisterResponse() { }\nif (false) {\n    /** @type {?} */\n    RegisterResponse.prototype.tenantId;\n    /** @type {?} */\n    RegisterResponse.prototype.userName;\n    /** @type {?} */\n    RegisterResponse.prototype.name;\n    /** @type {?} */\n    RegisterResponse.prototype.surname;\n    /** @type {?} */\n    RegisterResponse.prototype.email;\n    /** @type {?} */\n    RegisterResponse.prototype.emailConfirmed;\n    /** @type {?} */\n    RegisterResponse.prototype.phoneNumber;\n    /** @type {?} */\n    RegisterResponse.prototype.phoneNumberConfirmed;\n    /** @type {?} */\n    RegisterResponse.prototype.twoFactorEnabled;\n    /** @type {?} */\n    RegisterResponse.prototype.lockoutEnabled;\n    /** @type {?} */\n    RegisterResponse.prototype.lockoutEnd;\n    /** @type {?} */\n    RegisterResponse.prototype.concurrencyStamp;\n    /** @type {?} */\n    RegisterResponse.prototype.isDeleted;\n    /** @type {?} */\n    RegisterResponse.prototype.deleterId;\n    /** @type {?} */\n    RegisterResponse.prototype.deletionTime;\n    /** @type {?} */\n    RegisterResponse.prototype.lastModificationTime;\n    /** @type {?} */\n    RegisterResponse.prototype.lastModifierId;\n    /** @type {?} */\n    RegisterResponse.prototype.creationTime;\n    /** @type {?} */\n    RegisterResponse.prototype.creatorId;\n    /** @type {?} */\n    RegisterResponse.prototype.id;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/models/tenant.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction TenantIdResponse() { }\nif (false) {\n    /** @type {?} */\n    TenantIdResponse.prototype.success;\n    /** @type {?} */\n    TenantIdResponse.prototype.tenantId;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/models/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: abp-ng.account.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { ACCOUNT_OPTIONS, ACCOUNT_ROUTES, AccountModule, AccountProviders, ChangePasswordComponent, LoginComponent, ManageProfileComponent, PersonalSettingsComponent, RegisterComponent, optionsFactory, AuthWrapperComponent as ɵa, LoginComponent as ɵb, RegisterComponent as ɵd, AccountService as ɵe, TenantBoxComponent as ɵf, ChangePasswordComponent as ɵg, ManageProfileComponent as ɵh, PersonalSettingsComponent as ɵi, AccountRoutingModule as ɵj, optionsFactory as ɵk, ACCOUNT_OPTIONS as ɵl };\n//# sourceMappingURL=abp-ng.account.js.map\n","import { NgModule } from '@angular/core';\nimport { AccountModule } from '@abp/ng.account';\n\n@NgModule({\n  imports: [AccountModule],\n})\nexport class AccountWrapperModule {}\n"],"sourceRoot":"webpack:///"}