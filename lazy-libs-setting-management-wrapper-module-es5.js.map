{"version":3,"sources":["node_modules/@abp/ng.setting-management/fesm2015/abp-ng.setting-management.js","src/app/lazy-libs/setting-management-wrapper.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { ConfigState, DynamicLayoutComponent, CoreModule } from '@abp/ng.core';\nimport { getSettingTabs, ThemeSharedModule } from '@abp/ng.theme.shared';\nimport { Component, NgModule } from '@angular/core';\nimport { Router, RouterModule } from '@angular/router';\nimport { Action, Selector, State, Store, NgxsModule } from '@ngxs/store';\nimport { __decorate, __metadata } from 'tslib';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/actions/setting-management.actions.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass SetSelectedSettingTab {\n    /**\n     * @param {?} payload\n     */\n    constructor(payload) {\n        this.payload = payload;\n    }\n}\nSetSelectedSettingTab.type = '[SettingManagement] Set Selected Tab';\nif (false) {\n    /** @type {?} */\n    SetSelectedSettingTab.type;\n    /** @type {?} */\n    SetSelectedSettingTab.prototype.payload;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/states/setting-management.state.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nlet SettingManagementState = class SettingManagementState {\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    static getSelectedTab({ selectedTab }) {\n        return selectedTab;\n    }\n    /**\n     * @param {?} __0\n     * @param {?} __1\n     * @return {?}\n     */\n    settingManagementAction({ patchState }, { payload }) {\n        patchState({\n            selectedTab: payload,\n        });\n    }\n};\n__decorate([\n    Action(SetSelectedSettingTab),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object, SetSelectedSettingTab]),\n    __metadata(\"design:returntype\", void 0)\n], SettingManagementState.prototype, \"settingManagementAction\", null);\n__decorate([\n    Selector(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object]),\n    __metadata(\"design:returntype\", void 0)\n], SettingManagementState, \"getSelectedTab\", null);\nSettingManagementState = __decorate([\n    State({\n        name: 'SettingManagementState',\n        defaults: (/** @type {?} */ ({ selectedTab: {} })),\n    })\n], SettingManagementState);\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/setting-management.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass SettingManagementComponent {\n    /**\n     * @param {?} router\n     * @param {?} store\n     */\n    constructor(router, store) {\n        this.router = router;\n        this.store = store;\n        this.settings = [];\n        this.trackByFn = (/**\n         * @param {?} _\n         * @param {?} item\n         * @return {?}\n         */\n        (_, item) => item.name);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selected(value) {\n        this.store.dispatch(new SetSelectedSettingTab(value));\n    }\n    /**\n     * @return {?}\n     */\n    get selected() {\n        /** @type {?} */\n        const value = this.store.selectSnapshot(SettingManagementState.getSelectedTab);\n        if ((!value || !value.component) && this.settings.length) {\n            return this.settings[0];\n        }\n        return value;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.settings = getSettingTabs()\n            .filter((/**\n         * @param {?} setting\n         * @return {?}\n         */\n        setting => this.store.selectSnapshot(ConfigState.getGrantedPolicy(setting.requiredPolicy))))\n            .sort((/**\n         * @param {?} a\n         * @param {?} b\n         * @return {?}\n         */\n        (a, b) => a.order - b.order));\n        if (!this.selected && this.settings.length) {\n            this.selected = this.settings[0];\n        }\n    }\n}\nSettingManagementComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'abp-setting-management',\n                template: \"<div class=\\\"row entry-row\\\">\\n  <div class=\\\"col-auto\\\">\\n    <h1 class=\\\"content-header-title\\\">{{ 'AbpSettingManagement::Settings' | abpLocalization }}</h1>\\n  </div>\\n  <div id=\\\"breadcrumb\\\" class=\\\"col-md-auto pl-md-0\\\">\\n    <abp-breadcrumb></abp-breadcrumb>\\n  </div>\\n  <div class=\\\"col\\\">\\n    <div class=\\\"text-lg-right pt-2\\\" id=\\\"AbpContentToolbar\\\"></div>\\n  </div>\\n</div>\\n\\n<div id=\\\"SettingManagementWrapper\\\">\\n  <div class=\\\"card\\\">\\n    <div class=\\\"card-body\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-12 col-md-3\\\">\\n          <ul class=\\\"nav flex-column nav-pills\\\" id=\\\"nav-tab\\\" role=\\\"tablist\\\">\\n            <li\\n              *abpFor=\\\"let setting of settings; trackBy: trackByFn\\\"\\n              (click)=\\\"selected = setting\\\"\\n              class=\\\"nav-item pointer\\\"\\n              [abpPermission]=\\\"setting.requiredPolicy\\\"\\n            >\\n              <a\\n                class=\\\"nav-link\\\"\\n                [id]=\\\"setting.name + '-tab'\\\"\\n                role=\\\"tab\\\"\\n                [class.active]=\\\"setting.name === selected.name\\\"\\n                >{{ setting.name | abpLocalization }}</a\\n              >\\n            </li>\\n          </ul>\\n        </div>\\n        <div class=\\\"col-12 col-md-9\\\">\\n          <div *ngIf=\\\"settings.length\\\" class=\\\"tab-content\\\">\\n            <div class=\\\"tab-pane fade show active\\\" [id]=\\\"selected.name + '-tab'\\\" role=\\\"tabpanel\\\">\\n              <ng-container *ngComponentOutlet=\\\"selected.component\\\"></ng-container>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"\n            }] }\n];\n/** @nocollapse */\nSettingManagementComponent.ctorParameters = () => [\n    { type: Router },\n    { type: Store }\n];\nif (false) {\n    /** @type {?} */\n    SettingManagementComponent.prototype.settings;\n    /** @type {?} */\n    SettingManagementComponent.prototype.trackByFn;\n    /**\n     * @type {?}\n     * @private\n     */\n    SettingManagementComponent.prototype.router;\n    /**\n     * @type {?}\n     * @private\n     */\n    SettingManagementComponent.prototype.store;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/setting-management-routing.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nconst ɵ0 = { requiredPolicy: 'AbpAccount.SettingManagement' };\n/** @type {?} */\nconst routes = [\n    {\n        path: '',\n        component: DynamicLayoutComponent,\n        children: [\n            { path: '', component: SettingManagementComponent, data: ɵ0 },\n        ],\n    },\n];\nclass SettingManagementRoutingModule {\n}\nSettingManagementRoutingModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [RouterModule.forChild(routes)],\n                exports: [RouterModule],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/setting-management.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass SettingManagementModule {\n}\nSettingManagementModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [SettingManagementComponent],\n                imports: [\n                    SettingManagementRoutingModule,\n                    CoreModule,\n                    ThemeSharedModule,\n                    NgxsModule.forFeature([SettingManagementState]),\n                ],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: abp-ng.setting-management.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { SettingManagementComponent, SettingManagementModule, SettingManagementRoutingModule as ɵa, SettingManagementState as ɵb, SetSelectedSettingTab as ɵc };\n//# sourceMappingURL=abp-ng.setting-management.js.map\n","import { NgModule } from '@angular/core';\nimport { SettingManagementModule } from '@abp/ng.setting-management';\n\n@NgModule({\n  imports: [SettingManagementModule],\n})\nexport class SettingManagementWrapperModule {}\n"],"sourceRoot":"webpack:///"}