{"version":3,"sources":["./node_modules/@abp/ng.feature-management/fesm2015/abp-ng.feature-management.js","./node_modules/@abp/ng.tenant-management/fesm2015/abp-ng.tenant-management.js","./src/app/lazy-libs/tenant-management-wrapper.module.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuD;AACE;AACkE;AAC5E;AACkC;AAC/C;AACoB;AACE;;AAExD;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAKV;AACD;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAKV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,oBAAoB,uCAAuC;AAC3D,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,mBAAmB,WAAW;AAC9B,qBAAqB,4BAA4B;AACjD;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK,OAAO,wDAAW,EAAE;AACzB,KAAK,OAAO,iDAAK;AACjB;AACA,8DAA8D,wEAAkB,EAAE,uDAAuD,qCAAqC,8DAAQ,CAAC,wDAAW,GAAG,8DAAQ,CAAC,iDAAK,GAAG,EAAE,uDAAuD;AAC/Q,WAAW,EAWV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,wBAAwB,WAAW;AACnC;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,iBAAiB,aAAa,GAAG,UAAU;AAC3C,uEAAuE,0DAAG;AAC1E,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,UAAU,WAAW;AACrB;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,uBAAuB,UAAU;AACjC;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,wDAAU;AACV,IAAI,0DAAM;AACV,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,0DAAM;AACV,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,4DAAQ;AACZ,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,yBAAyB,wDAAU;AACnC,IAAI,yDAAK;AACT;AACA,8BAA8B,EAAE,MAAM,aAAa,EAAE;AACrD,KAAK;AACL,IAAI,wDAAU;AACd;AACA,WAAW,EAMV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA,iCAAiC,0DAAY;AAC7C;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,kBAAkB,4DAAK;AACvB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,uBAAuB,qBAAqB;AAC5C,kCAAkC,0DAAW;AAC7C;AACA,wBAAwB,wDAAS;AACjC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,kBAAkB,+DAAQ;AAC1B,oBAAoB;AACpB;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA,uIAAuI,sDAAsD,sOAAsO,yGAAyG,gBAAgB,8aAA8a,mEAAmE,uNAAuN,oDAAoD,wIAAwI,kDAAkD;AACl9C,aAAa;AACb;AACA;AACA;AACA,KAAK,OAAO,iDAAK;AACjB;AACA;AACA,mBAAmB,OAAO,mDAAK,EAAE;AACjC,oBAAoB,OAAO,mDAAK,EAAE;AAClC,eAAe,OAAO,mDAAK,EAAE;AAC7B,qBAAqB,OAAO,oDAAM,EAAE;AACpC;AACA,wDAAU;AACV,IAAI,0DAAM;AACV,IAAI,wDAAU,gBAAgB,+CAAU;AACxC;AACA,WAAW,EAuBV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB;AACA,0BAA0B,uDAAU,EAAE,sEAAiB,EAAE,sDAAU;AACnE;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEsO;AACtO;;;;;;;;;;;;;ACjYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2G;AAC7B;AAC2B;AAC1C;AACkB;AACrC;AACG;AACU;AACvB;AACqC;AACxB;AACsB;AACV;;AAE3D;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAKV;AACD;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAKV;AACD;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAKV;AACD;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAKV;AACD;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAKV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,mCAAmC,EAAE,OAAO;AAC5C,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,+CAA+C,GAAG;AAClD;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,+CAA+C,GAAG;AAClD;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,kDAAkD,QAAQ;AAC1D;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,kDAAkD,GAAG;AACrD,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,kDAAkD,WAAW;AAC7D,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,kDAAkD,GAAG;AACrD,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK,OAAO,wDAAW;AACvB;AACA,6DAA6D,wEAAkB,EAAE,sDAAsD,oCAAoC,8DAAQ,CAAC,wDAAW,GAAG,EAAE,sDAAsD;AAC1P,WAAW,EAMV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,gBAAgB,SAAS;AACzB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,iCAAiC,SAAS;AAC1C;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,SAAS,aAAa,GAAG,UAAU;AACnC,oEAAoE,0DAAG;AACvE,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,aAAa,aAAa,GAAG,UAAU;AACvC,wEAAwE,0DAAG;AAC3E,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,eAAe,UAAU;AACzB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,YAAY,UAAU;AACtB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,YAAY,WAAW,GAAG,UAAU;AACpC,yEAAyE;AACzE;AACA;AACA;AACA,KAAK;AACL;AACA,wDAAU;AACV,IAAI,0DAAM;AACV,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,0DAAM;AACV,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,0DAAM;AACV,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,0DAAM;AACV,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,0DAAM;AACV,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,4DAAQ;AACZ,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,4DAAQ;AACZ,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wBAAwB,wDAAU;AAClC,IAAI,yDAAK;AACT;AACA,8BAA8B,EAAE,MAAM,WAAW,kBAAkB,EAAE;AACrE,KAAK;AACL,IAAI,wDAAU;AACd;AACA,WAAW,EAMV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,iCAAiC;AACjC,WAAW,EAOV;AACD;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,EAAE,OAAO;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,8CAA8C,yDAAU,WAAW,yDAAU;AAC7E,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,kBAAkB,4DAAK,2CAA2C,gEAAS;AAC3E,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA,oCAAoC,EAAE,OAAO;AAC7C;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,kBAAkB,4DAAK;AACvB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,2DAAI,KAAK,+DAAQ;AACvC,wBAAwB;AACxB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,sBAAsB,2DAAI,KAAK,+DAAQ;AACvC,wBAAwB;AACxB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,yCAAyC,uBAAuB;AAC/G;AACA,kBAAkB,+DAAQ;AAC1B,oBAAoB;AACpB;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,kBAAkB,+DAAQ;AAC1B,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B,EAAE;AAC7B,4DAA4D,EAAE;AAC9D;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA,+LAA+L,oDAAoD,sWAAsW,sDAAsD,kiBAAkiB,iCAAiC,8aAA8a,iCAAiC,6bAA6b,oDAAoD,6FAA6F,uDAAuD,0tBAA0tB,oDAAoD,iSAAiS,iDAAiD,2RAA2R,+EAA+E,8NAA8N,kEAAkE,sEAAsE,qQAAqQ,mDAAmD,wGAAwG,aAAa,mMAAmM,gDAAgD,yQAAyQ,mDAAmD,oHAAoH,qDAAqD,2PAA2P,uDAAuD,muBAAmuB,8FAA8F,gJAAgJ,gGAAgG;AAC9jN,aAAa;AACb;AACA;AACA;AACA,KAAK,OAAO,wEAAmB,EAAE;AACjC,KAAK,gCAAgC;AACrC,KAAK,OAAO,0DAAW,EAAE;AACzB,KAAK,OAAO,iDAAK;AACjB;AACA;AACA,2BAA2B,OAAO,uDAAS,iCAAiC,gBAAgB,IAAI;AAChG,qCAAqC,OAAO,uDAAS,2CAA2C,gBAAgB,IAAI;AACpH;AACA,wDAAU;AACV,IAAI,0DAAM;AACV,IAAI,wDAAU,gBAAgB,+CAAU;AACxC;AACA,wDAAU;AACV,IAAI,0DAAM;AACV,IAAI,wDAAU,gBAAgB,+CAAU;AACxC;AACA,WAAW,EAyDV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,YAAY;AACZ,WAAW,EAAE;AACb;AACA,KAAK,qDAAqD;AAC1D;AACA;AACA,mBAAmB,mEAAsB;AACzC,sBAAsB,sDAAS,EAAE,4DAAe;AAChD;AACA,oBAAoB,wCAAwC;AAC5D,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB,0BAA0B,6DAAY;AACtC,0BAA0B,6DAAY;AACtC,aAAa;AACb;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB;AACA;AACA;AACA,oBAAoB,sDAAU;AAC9B,oBAAoB,yEAAqB;AACzC,oBAAoB,uDAAU;AAC9B,oBAAoB,yDAAW;AAC/B,oBAAoB,sEAAiB;AACrC,oBAAoB,4EAAiB;AACrC,oBAAoB,mFAAuB;AAC3C;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,wBAAwB,EAAE;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,eAAe,EAKV;AACL;AACA;AACA;AACA,qBAAqB;AACrB;AACA,eAAe,EAKV;AACL;AACA;AACA;AACA,2BAA2B;AAC3B;AACA,eAAe,EAGV;AACL;AACA;AACA;AACA,8BAA8B;AAC9B;AACA,eAAe,EAGV;AACL;AACA;AACA;AACA,+CAA+C;AAC/C;AACA,eAAe,EAKV;AACL,CAAC,4CAA4C;;AAE7C;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK,OAAO,iDAAK;AACjB;AACA,kEAAkE,wEAAkB,EAAE,2DAA2D,yCAAyC,8DAAQ,CAAC,iDAAK,GAAG,EAAE,2DAA2D;AACxQ,WAAW,EAMV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEwd;AACxd;;;;;;;;;;;;;;;;;;;AC5+ByC;AAC0B;AAKnE,IAAa,6BAA6B,GAA1C,MAAa,6BAA6B;CAAG;AAAhC,6BAA6B;IAHzC,8DAAQ,CAAC;QACR,OAAO,EAAE,CAAC,gFAAsB,CAAC;KAClC,CAAC;GACW,6BAA6B,CAAG;AAAH","file":"lazy-libs-tenant-management-wrapper-module-es2015.js","sourcesContent":["import { RestService, CoreModule } from '@abp/ng.core';\nimport { ThemeSharedModule } from '@abp/ng.theme.shared';\nimport { Injectable, ɵɵdefineInjectable, ɵɵinject, EventEmitter, Component, Input, Output, NgModule } from '@angular/core';\nimport { __decorate, __metadata } from 'tslib';\nimport { Store, Action, Selector, State, Select, NgxsModule } from '@ngxs/store';\nimport { Observable } from 'rxjs';\nimport { tap, pluck, finalize } from 'rxjs/operators';\nimport { FormControl, FormGroup } from '@angular/forms';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/actions/feature-management.actions.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass GetFeatures {\n    /**\n     * @param {?} payload\n     */\n    constructor(payload) {\n        this.payload = payload;\n    }\n}\nGetFeatures.type = '[FeatureManagement] Get Features';\nif (false) {\n    /** @type {?} */\n    GetFeatures.type;\n    /** @type {?} */\n    GetFeatures.prototype.payload;\n}\nclass UpdateFeatures {\n    /**\n     * @param {?} payload\n     */\n    constructor(payload) {\n        this.payload = payload;\n    }\n}\nUpdateFeatures.type = '[FeatureManagement] Update Features';\nif (false) {\n    /** @type {?} */\n    UpdateFeatures.type;\n    /** @type {?} */\n    UpdateFeatures.prototype.payload;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/actions/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/services/feature-management.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FeatureManagementService {\n    /**\n     * @param {?} rest\n     * @param {?} store\n     */\n    constructor(rest, store) {\n        this.rest = rest;\n        this.store = store;\n    }\n    /**\n     * @param {?} params\n     * @return {?}\n     */\n    getFeatures(params) {\n        /** @type {?} */\n        const request = {\n            method: 'GET',\n            url: '/api/abp/features',\n            params,\n        };\n        return this.rest.request(request);\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    updateFeatures({ features, providerKey, providerName, }) {\n        /** @type {?} */\n        const request = {\n            method: 'PUT',\n            url: '/api/abp/features',\n            body: { features },\n            params: { providerKey, providerName },\n        };\n        return this.rest.request(request);\n    }\n}\nFeatureManagementService.decorators = [\n    { type: Injectable, args: [{\n                providedIn: 'root',\n            },] }\n];\n/** @nocollapse */\nFeatureManagementService.ctorParameters = () => [\n    { type: RestService },\n    { type: Store }\n];\n/** @nocollapse */ FeatureManagementService.ngInjectableDef = ɵɵdefineInjectable({ factory: function FeatureManagementService_Factory() { return new FeatureManagementService(ɵɵinject(RestService), ɵɵinject(Store)); }, token: FeatureManagementService, providedIn: \"root\" });\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    FeatureManagementService.prototype.rest;\n    /**\n     * @type {?}\n     * @private\n     */\n    FeatureManagementService.prototype.store;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/states/feature-management.state.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nlet FeatureManagementState = class FeatureManagementState {\n    /**\n     * @param {?} featureManagementService\n     */\n    constructor(featureManagementService) {\n        this.featureManagementService = featureManagementService;\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    static getFeatures({ features }) {\n        return features || [];\n    }\n    /**\n     * @param {?} __0\n     * @param {?} __1\n     * @return {?}\n     */\n    getFeatures({ patchState }, { payload }) {\n        return this.featureManagementService.getFeatures(payload).pipe(tap((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ({ features }) => patchState({\n            features,\n        }))));\n    }\n    /**\n     * @param {?} _\n     * @param {?} __1\n     * @return {?}\n     */\n    updateFeatures(_, { payload }) {\n        return this.featureManagementService.updateFeatures(payload);\n    }\n};\nFeatureManagementState.ctorParameters = () => [\n    { type: FeatureManagementService }\n];\n__decorate([\n    Action(GetFeatures),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object, GetFeatures]),\n    __metadata(\"design:returntype\", void 0)\n], FeatureManagementState.prototype, \"getFeatures\", null);\n__decorate([\n    Action(UpdateFeatures),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object, UpdateFeatures]),\n    __metadata(\"design:returntype\", void 0)\n], FeatureManagementState.prototype, \"updateFeatures\", null);\n__decorate([\n    Selector(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object]),\n    __metadata(\"design:returntype\", void 0)\n], FeatureManagementState, \"getFeatures\", null);\nFeatureManagementState = __decorate([\n    State({\n        name: 'FeatureManagementState',\n        defaults: (/** @type {?} */ ({ features: {} })),\n    }),\n    __metadata(\"design:paramtypes\", [FeatureManagementService])\n], FeatureManagementState);\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    FeatureManagementState.prototype.featureManagementService;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/states/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/feature-management/feature-management.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FeatureManagementComponent {\n    /**\n     * @param {?} store\n     */\n    constructor(store) {\n        this.store = store;\n        this.visibleChange = new EventEmitter();\n        this.modalBusy = false;\n    }\n    /**\n     * @return {?}\n     */\n    get visible() {\n        return this._visible;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set visible(value) {\n        this._visible = value;\n        this.visibleChange.emit(value);\n        if (value)\n            this.openModal();\n    }\n    /**\n     * @return {?}\n     */\n    openModal() {\n        if (!this.providerKey || !this.providerName) {\n            throw new Error('Provider Key and Provider Name are required.');\n        }\n        this.getFeatures();\n    }\n    /**\n     * @return {?}\n     */\n    getFeatures() {\n        this.store\n            .dispatch(new GetFeatures({\n            providerKey: this.providerKey,\n            providerName: this.providerName,\n        }))\n            .pipe(pluck('FeatureManagementState', 'features'))\n            .subscribe((/**\n         * @param {?} features\n         * @return {?}\n         */\n        features => {\n            this.buildForm(features);\n        }));\n    }\n    /**\n     * @param {?} features\n     * @return {?}\n     */\n    buildForm(features) {\n        /** @type {?} */\n        const formGroupObj = {};\n        for (let i = 0; i < features.length; i++) {\n            formGroupObj[i] = new FormControl(features[i].value === 'false' ? null : features[i].value);\n        }\n        this.form = new FormGroup(formGroupObj);\n    }\n    /**\n     * @return {?}\n     */\n    save() {\n        if (this.modalBusy)\n            return;\n        this.modalBusy = true;\n        /** @type {?} */\n        let features = this.store.selectSnapshot(FeatureManagementState.getFeatures);\n        features = features.map((/**\n         * @param {?} feature\n         * @param {?} i\n         * @return {?}\n         */\n        (feature, i) => ({\n            name: feature.name,\n            value: !this.form.value[i] || this.form.value[i] === 'false' ? null : this.form.value[i],\n        })));\n        this.store\n            .dispatch(new UpdateFeatures({\n            providerKey: this.providerKey,\n            providerName: this.providerName,\n            features,\n        }))\n            .pipe(finalize((/**\n         * @return {?}\n         */\n        () => (this.modalBusy = false))))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this.visible = false;\n        }));\n    }\n}\nFeatureManagementComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'abp-feature-management',\n                template: \"<abp-modal size=\\\"md\\\" [(visible)]=\\\"visible\\\" [busy]=\\\"modalBusy\\\">\\n  <ng-template #abpHeader>\\n    <h3>{{ 'AbpFeatureManagement::Features' | abpLocalization }}</h3>\\n  </ng-template>\\n\\n  <ng-template #abpBody>\\n    <form *ngIf=\\\"form\\\" (ngSubmit)=\\\"save()\\\" [formGroup]=\\\"form\\\" validateOnSubmit>\\n      <div\\n        class=\\\"row my-3\\\"\\n        *ngFor=\\\"let feature of features$ | async; let i = index\\\"\\n        [ngSwitch]=\\\"feature.valueType.name\\\"\\n      >\\n        <div class=\\\"col-4\\\">{{ feature.name }}</div>\\n        <div class=\\\"col-8\\\" *ngSwitchCase=\\\"'ToggleStringValueType'\\\">\\n          <input type=\\\"checkbox\\\" name=\\\"feature.name\\\" [formControlName]=\\\"i\\\" />\\n        </div>\\n        <div class=\\\"col-8\\\" *ngSwitchCase=\\\"'FreeTextStringValueType'\\\">\\n          <input type=\\\"text\\\" name=\\\"feature.name\\\" [formControlName]=\\\"i\\\" />\\n        </div>\\n      </div>\\n      <div *ngIf=\\\"!(features$ | async)?.length\\\">\\n        {{ 'AbpFeatureManagement::NoFeatureFoundMessage' | abpLocalization }}\\n      </div>\\n    </form>\\n  </ng-template>\\n\\n  <ng-template #abpFooter>\\n    <ng-container *ngIf=\\\"(features$ | async)?.length\\\">\\n      <button #abpClose type=\\\"button\\\" class=\\\"btn btn-secondary\\\">\\n        {{ 'AbpFeatureManagement::Cancel' | abpLocalization }}\\n      </button>\\n      <abp-button iconClass=\\\"fa fa-check\\\" [disabled]=\\\"form?.invalid || modalBusy\\\" (click)=\\\"save()\\\">\\n        {{ 'AbpFeatureManagement::Save' | abpLocalization }}\\n      </abp-button>\\n    </ng-container>\\n  </ng-template>\\n</abp-modal>\\n\"\n            }] }\n];\n/** @nocollapse */\nFeatureManagementComponent.ctorParameters = () => [\n    { type: Store }\n];\nFeatureManagementComponent.propDecorators = {\n    providerKey: [{ type: Input }],\n    providerName: [{ type: Input }],\n    visible: [{ type: Input }],\n    visibleChange: [{ type: Output }]\n};\n__decorate([\n    Select(FeatureManagementState.getFeatures),\n    __metadata(\"design:type\", Observable)\n], FeatureManagementComponent.prototype, \"features$\", void 0);\nif (false) {\n    /** @type {?} */\n    FeatureManagementComponent.prototype.providerKey;\n    /** @type {?} */\n    FeatureManagementComponent.prototype.providerName;\n    /**\n     * @type {?}\n     * @protected\n     */\n    FeatureManagementComponent.prototype._visible;\n    /** @type {?} */\n    FeatureManagementComponent.prototype.visibleChange;\n    /** @type {?} */\n    FeatureManagementComponent.prototype.features$;\n    /** @type {?} */\n    FeatureManagementComponent.prototype.modalBusy;\n    /** @type {?} */\n    FeatureManagementComponent.prototype.form;\n    /**\n     * @type {?}\n     * @private\n     */\n    FeatureManagementComponent.prototype.store;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/feature-management.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FeatureManagementModule {\n}\nFeatureManagementModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [FeatureManagementComponent],\n                imports: [CoreModule, ThemeSharedModule, NgxsModule.forFeature([FeatureManagementState])],\n                exports: [FeatureManagementComponent],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: abp-ng.feature-management.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { FeatureManagementComponent, FeatureManagementModule, FeatureManagementComponent as ɵa, FeatureManagementState as ɵb, FeatureManagementState as ɵc, FeatureManagementService as ɵd, GetFeatures as ɵe, UpdateFeatures as ɵf };\n//# sourceMappingURL=abp-ng.feature-management.js.map\n","import { RestService, DynamicLayoutComponent, AuthGuard, PermissionGuard, CoreModule } from '@abp/ng.core';\nimport { ConfirmationService, ThemeSharedModule } from '@abp/ng.theme.shared';\nimport { Injectable, ɵɵdefineInjectable, ɵɵinject, Component, ViewChild, NgModule } from '@angular/core';\nimport { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';\nimport { Action, Selector, State, Store, Select, NgxsModule } from '@ngxs/store';\nimport { TableModule } from 'primeng/table';\nimport { __decorate, __metadata } from 'tslib';\nimport { Validators, FormBuilder } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { tap, pluck, switchMap, take, finalize } from 'rxjs/operators';\nimport { RouterModule } from '@angular/router';\nimport { FeatureManagementModule } from '@abp/ng.feature-management';\nimport { NgxValidateCoreModule } from '@ngx-validate/core';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/actions/tenant-management.actions.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass GetTenants {\n    /**\n     * @param {?=} payload\n     */\n    constructor(payload) {\n        this.payload = payload;\n    }\n}\nGetTenants.type = '[TenantManagement] Get Tenant';\nif (false) {\n    /** @type {?} */\n    GetTenants.type;\n    /** @type {?} */\n    GetTenants.prototype.payload;\n}\nclass GetTenantById {\n    /**\n     * @param {?} payload\n     */\n    constructor(payload) {\n        this.payload = payload;\n    }\n}\nGetTenantById.type = '[TenantManagement] Get Tenant By Id';\nif (false) {\n    /** @type {?} */\n    GetTenantById.type;\n    /** @type {?} */\n    GetTenantById.prototype.payload;\n}\nclass CreateTenant {\n    /**\n     * @param {?} payload\n     */\n    constructor(payload) {\n        this.payload = payload;\n    }\n}\nCreateTenant.type = '[TenantManagement] Create Tenant';\nif (false) {\n    /** @type {?} */\n    CreateTenant.type;\n    /** @type {?} */\n    CreateTenant.prototype.payload;\n}\nclass UpdateTenant {\n    /**\n     * @param {?} payload\n     */\n    constructor(payload) {\n        this.payload = payload;\n    }\n}\nUpdateTenant.type = '[TenantManagement] Update Tenant';\nif (false) {\n    /** @type {?} */\n    UpdateTenant.type;\n    /** @type {?} */\n    UpdateTenant.prototype.payload;\n}\nclass DeleteTenant {\n    /**\n     * @param {?} payload\n     */\n    constructor(payload) {\n        this.payload = payload;\n    }\n}\nDeleteTenant.type = '[TenantManagement] Delete Tenant';\nif (false) {\n    /** @type {?} */\n    DeleteTenant.type;\n    /** @type {?} */\n    DeleteTenant.prototype.payload;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/services/tenant-management.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass TenantManagementService {\n    /**\n     * @param {?} rest\n     */\n    constructor(rest) {\n        this.rest = rest;\n    }\n    /**\n     * @param {?=} params\n     * @return {?}\n     */\n    getTenant(params = (/** @type {?} */ ({}))) {\n        /** @type {?} */\n        const request = {\n            method: 'GET',\n            url: '/api/multi-tenancy/tenants',\n            params\n        };\n        return this.rest.request(request);\n    }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    getTenantById(id) {\n        /** @type {?} */\n        const request = {\n            method: 'GET',\n            url: `/api/multi-tenancy/tenants/${id}`\n        };\n        return this.rest.request(request);\n    }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    deleteTenant(id) {\n        /** @type {?} */\n        const request = {\n            method: 'DELETE',\n            url: `/api/multi-tenancy/tenants/${id}`\n        };\n        return this.rest.request(request);\n    }\n    /**\n     * @param {?} body\n     * @return {?}\n     */\n    createTenant(body) {\n        /** @type {?} */\n        const request = {\n            method: 'POST',\n            url: '/api/multi-tenancy/tenants',\n            body\n        };\n        return this.rest.request(request);\n    }\n    /**\n     * @param {?} body\n     * @return {?}\n     */\n    updateTenant(body) {\n        /** @type {?} */\n        const url = `/api/multi-tenancy/tenants/${body.id}`;\n        delete body.id;\n        /** @type {?} */\n        const request = {\n            method: 'PUT',\n            url,\n            body\n        };\n        return this.rest.request(request);\n    }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    getDefaultConnectionString(id) {\n        /** @type {?} */\n        const url = `/api/multi-tenancy/tenants/${id}/default-connection-string`;\n        /** @type {?} */\n        const request = {\n            method: 'GET',\n            responseType: \"text\" /* Text */,\n            url\n        };\n        return this.rest.request(request);\n    }\n    /**\n     * @param {?} payload\n     * @return {?}\n     */\n    updateDefaultConnectionString(payload) {\n        /** @type {?} */\n        const url = `/api/multi-tenancy/tenants/${payload.id}/default-connection-string`;\n        /** @type {?} */\n        const request = {\n            method: 'PUT',\n            url,\n            params: { defaultConnectionString: payload.defaultConnectionString }\n        };\n        return this.rest.request(request);\n    }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    deleteDefaultConnectionString(id) {\n        /** @type {?} */\n        const url = `/api/multi-tenancy/tenants/${id}/default-connection-string`;\n        /** @type {?} */\n        const request = {\n            method: 'DELETE',\n            url\n        };\n        return this.rest.request(request);\n    }\n}\nTenantManagementService.decorators = [\n    { type: Injectable, args: [{\n                providedIn: 'root'\n            },] }\n];\n/** @nocollapse */\nTenantManagementService.ctorParameters = () => [\n    { type: RestService }\n];\n/** @nocollapse */ TenantManagementService.ngInjectableDef = ɵɵdefineInjectable({ factory: function TenantManagementService_Factory() { return new TenantManagementService(ɵɵinject(RestService)); }, token: TenantManagementService, providedIn: \"root\" });\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    TenantManagementService.prototype.rest;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/states/tenant-management.state.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nlet TenantManagementState = class TenantManagementState {\n    /**\n     * @param {?} tenantManagementService\n     */\n    constructor(tenantManagementService) {\n        this.tenantManagementService = tenantManagementService;\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    static get({ result }) {\n        return result.items || [];\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    static getTenantsTotalCount({ result }) {\n        return result.totalCount;\n    }\n    /**\n     * @param {?} __0\n     * @param {?} __1\n     * @return {?}\n     */\n    get({ patchState }, { payload }) {\n        return this.tenantManagementService.getTenant(payload).pipe(tap((/**\n         * @param {?} result\n         * @return {?}\n         */\n        result => patchState({\n            result,\n        }))));\n    }\n    /**\n     * @param {?} __0\n     * @param {?} __1\n     * @return {?}\n     */\n    getById({ patchState }, { payload }) {\n        return this.tenantManagementService.getTenantById(payload).pipe(tap((/**\n         * @param {?} selectedItem\n         * @return {?}\n         */\n        selectedItem => patchState({\n            selectedItem,\n        }))));\n    }\n    /**\n     * @param {?} _\n     * @param {?} __1\n     * @return {?}\n     */\n    delete(_, { payload }) {\n        return this.tenantManagementService.deleteTenant(payload);\n    }\n    /**\n     * @param {?} _\n     * @param {?} __1\n     * @return {?}\n     */\n    add(_, { payload }) {\n        return this.tenantManagementService.createTenant(payload);\n    }\n    /**\n     * @param {?} __0\n     * @param {?} __1\n     * @return {?}\n     */\n    update({ getState }, { payload }) {\n        return this.tenantManagementService.updateTenant(Object.assign({}, getState().selectedItem, payload));\n    }\n};\nTenantManagementState.ctorParameters = () => [\n    { type: TenantManagementService }\n];\n__decorate([\n    Action(GetTenants),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object, GetTenants]),\n    __metadata(\"design:returntype\", void 0)\n], TenantManagementState.prototype, \"get\", null);\n__decorate([\n    Action(GetTenantById),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object, GetTenantById]),\n    __metadata(\"design:returntype\", void 0)\n], TenantManagementState.prototype, \"getById\", null);\n__decorate([\n    Action(DeleteTenant),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object, DeleteTenant]),\n    __metadata(\"design:returntype\", void 0)\n], TenantManagementState.prototype, \"delete\", null);\n__decorate([\n    Action(CreateTenant),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object, CreateTenant]),\n    __metadata(\"design:returntype\", void 0)\n], TenantManagementState.prototype, \"add\", null);\n__decorate([\n    Action(UpdateTenant),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object, UpdateTenant]),\n    __metadata(\"design:returntype\", void 0)\n], TenantManagementState.prototype, \"update\", null);\n__decorate([\n    Selector(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object]),\n    __metadata(\"design:returntype\", Array)\n], TenantManagementState, \"get\", null);\n__decorate([\n    Selector(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object]),\n    __metadata(\"design:returntype\", Number)\n], TenantManagementState, \"getTenantsTotalCount\", null);\nTenantManagementState = __decorate([\n    State({\n        name: 'TenantManagementState',\n        defaults: (/** @type {?} */ ({ result: {}, selectedItem: {} })),\n    }),\n    __metadata(\"design:paramtypes\", [TenantManagementService])\n], TenantManagementState);\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    TenantManagementState.prototype.tenantManagementService;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/tenants/tenants.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction SelectedModalContent() { }\nif (false) {\n    /** @type {?} */\n    SelectedModalContent.prototype.type;\n    /** @type {?} */\n    SelectedModalContent.prototype.title;\n    /** @type {?} */\n    SelectedModalContent.prototype.template;\n}\nclass TenantsComponent {\n    /**\n     * @param {?} confirmationService\n     * @param {?} tenantService\n     * @param {?} fb\n     * @param {?} store\n     */\n    constructor(confirmationService, tenantService, fb, store) {\n        this.confirmationService = confirmationService;\n        this.tenantService = tenantService;\n        this.fb = fb;\n        this.store = store;\n        this.selectedModalContent = (/** @type {?} */ ({}));\n        this.visibleFeatures = false;\n        this.pageQuery = {};\n        this.loading = false;\n        this.modalBusy = false;\n        this.sortOrder = '';\n        this.sortKey = '';\n    }\n    /**\n     * @return {?}\n     */\n    get useSharedDatabase() {\n        return this.defaultConnectionStringForm.get('useSharedDatabase').value;\n    }\n    /**\n     * @return {?}\n     */\n    get connectionString() {\n        return this.defaultConnectionStringForm.get('defaultConnectionString').value;\n    }\n    /**\n     * @return {?}\n     */\n    get isDisabledSaveButton() {\n        if (!this.selectedModalContent)\n            return false;\n        if (this.selectedModalContent.type === 'saveConnStr' &&\n            this.defaultConnectionStringForm &&\n            this.defaultConnectionStringForm.invalid) {\n            return true;\n        }\n        else if (this.selectedModalContent.type === 'saveTenant' &&\n            this.tenantForm &&\n            this.tenantForm.invalid) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.get();\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    onSearch(value) {\n        this.pageQuery.filter = value;\n        this.get();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    createTenantForm() {\n        this.tenantForm = this.fb.group({\n            name: [this.selected.name || '', [Validators.required, Validators.maxLength(256)]],\n        });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    createDefaultConnectionStringForm() {\n        this.defaultConnectionStringForm = this.fb.group({\n            useSharedDatabase: this._useSharedDatabase,\n            defaultConnectionString: [this.defaultConnectionString || ''],\n        });\n    }\n    /**\n     * @param {?} title\n     * @param {?} template\n     * @param {?} type\n     * @return {?}\n     */\n    openModal(title, template, type) {\n        this.selectedModalContent = {\n            title,\n            template,\n            type,\n        };\n        this.isModalVisible = true;\n    }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    onEditConnectionString(id) {\n        this.store\n            .dispatch(new GetTenantById(id))\n            .pipe(pluck('TenantManagementState', 'selectedItem'), switchMap((/**\n         * @param {?} selected\n         * @return {?}\n         */\n        selected => {\n            this.selected = selected;\n            return this.tenantService.getDefaultConnectionString(id);\n        })))\n            .subscribe((/**\n         * @param {?} fetchedConnectionString\n         * @return {?}\n         */\n        fetchedConnectionString => {\n            this._useSharedDatabase = fetchedConnectionString ? false : true;\n            this.defaultConnectionString = fetchedConnectionString ? fetchedConnectionString : '';\n            this.createDefaultConnectionStringForm();\n            this.openModal('AbpTenantManagement::ConnectionStrings', this.connectionStringModalTemplate, 'saveConnStr');\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    addTenant() {\n        this.selected = (/** @type {?} */ ({}));\n        this.createTenantForm();\n        this.openModal('AbpTenantManagement::NewTenant', this.tenantModalTemplate, 'saveTenant');\n    }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    editTenant(id) {\n        this.store\n            .dispatch(new GetTenantById(id))\n            .pipe(pluck('TenantManagementState', 'selectedItem'))\n            .subscribe((/**\n         * @param {?} selected\n         * @return {?}\n         */\n        selected => {\n            this.selected = selected;\n            this.createTenantForm();\n            this.openModal('AbpTenantManagement::Edit', this.tenantModalTemplate, 'saveTenant');\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    save() {\n        const { type } = this.selectedModalContent;\n        if (!type)\n            return;\n        if (type === 'saveTenant')\n            this.saveTenant();\n        else if (type === 'saveConnStr')\n            this.saveConnectionString();\n    }\n    /**\n     * @return {?}\n     */\n    saveConnectionString() {\n        if (this.modalBusy)\n            return;\n        this.modalBusy = true;\n        if (this.useSharedDatabase || (!this.useSharedDatabase && !this.connectionString)) {\n            this.tenantService\n                .deleteDefaultConnectionString(this.selected.id)\n                .pipe(take(1), finalize((/**\n             * @return {?}\n             */\n            () => (this.modalBusy = false))))\n                .subscribe((/**\n             * @return {?}\n             */\n            () => {\n                this.isModalVisible = false;\n            }));\n        }\n        else {\n            this.tenantService\n                .updateDefaultConnectionString({\n                id: this.selected.id,\n                defaultConnectionString: this.connectionString,\n            })\n                .pipe(take(1), finalize((/**\n             * @return {?}\n             */\n            () => (this.modalBusy = false))))\n                .subscribe((/**\n             * @return {?}\n             */\n            () => {\n                this.isModalVisible = false;\n            }));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    saveTenant() {\n        if (!this.tenantForm.valid || this.modalBusy)\n            return;\n        this.modalBusy = true;\n        this.store\n            .dispatch(this.selected.id\n            ? new UpdateTenant(Object.assign({}, this.selected, this.tenantForm.value, { id: this.selected.id }))\n            : new CreateTenant(this.tenantForm.value))\n            .pipe(finalize((/**\n         * @return {?}\n         */\n        () => (this.modalBusy = false))))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this.isModalVisible = false;\n            this.get();\n        }));\n    }\n    /**\n     * @param {?} id\n     * @param {?} name\n     * @return {?}\n     */\n    delete(id, name) {\n        this.confirmationService\n            .warn('AbpTenantManagement::TenantDeletionConfirmationMessage', 'AbpTenantManagement::AreYouSure', {\n            messageLocalizationParams: [name],\n        })\n            .subscribe((/**\n         * @param {?} status\n         * @return {?}\n         */\n        (status) => {\n            if (status === \"confirm\" /* confirm */) {\n                this.store.dispatch(new DeleteTenant(id)).subscribe((/**\n                 * @return {?}\n                 */\n                () => this.get()));\n            }\n        }));\n    }\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n    onPageChange(data) {\n        this.pageQuery.skipCount = data.first;\n        this.pageQuery.maxResultCount = data.rows;\n        this.get();\n    }\n    /**\n     * @return {?}\n     */\n    get() {\n        this.loading = true;\n        this.store\n            .dispatch(new GetTenants(this.pageQuery))\n            .pipe(finalize((/**\n         * @return {?}\n         */\n        () => (this.loading = false))))\n            .subscribe();\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    onSharedDatabaseChange(value) {\n        if (!value) {\n            setTimeout((/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                const defaultConnectionString = (/** @type {?} */ (document.getElementById('defaultConnectionString')));\n                if (defaultConnectionString) {\n                    defaultConnectionString.focus();\n                }\n            }), 0);\n        }\n    }\n}\nTenantsComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'abp-tenants',\n                template: \"<div id=\\\"wrapper\\\" class=\\\"card\\\">\\n  <div class=\\\"card-header\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col col-md-6\\\">\\n        <h5 class=\\\"card-title\\\">{{ 'AbpTenantManagement::Tenants' | abpLocalization }}</h5>\\n      </div>\\n      <div class=\\\"text-right col col-md-6\\\">\\n        <button\\n          *abpPermission=\\\"'AbpTenantManagement.Tenants.Create'\\\"\\n          id=\\\"create-tenants\\\"\\n          class=\\\"btn btn-primary\\\"\\n          type=\\\"button\\\"\\n          (click)=\\\"addTenant()\\\"\\n        >\\n          <i class=\\\"fa fa-plus mr-1\\\"></i>\\n          <span>{{ 'AbpTenantManagement::NewTenant' | abpLocalization }}</span>\\n        </button>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"card-body\\\">\\n    <div id=\\\"data-tables-table-filter\\\" class=\\\"data-tables-filter\\\">\\n      <label\\n        ><input\\n          type=\\\"search\\\"\\n          class=\\\"form-control form-control-sm\\\"\\n          [placeholder]=\\\"'AbpUi::PagerSearch' | abpLocalization\\\"\\n          (input.debounce)=\\\"onSearch($event.target.value)\\\"\\n      /></label>\\n    </div>\\n    <p-table\\n      *ngIf=\\\"[150, 0] as columnWidths\\\"\\n      [value]=\\\"data$ | async\\\"\\n      [abpTableSort]=\\\"{ key: sortKey, order: sortOrder }\\\"\\n      [lazy]=\\\"true\\\"\\n      [lazyLoadOnInit]=\\\"false\\\"\\n      [paginator]=\\\"true\\\"\\n      [rows]=\\\"10\\\"\\n      [totalRecords]=\\\"totalCount$ | async\\\"\\n      [loading]=\\\"loading\\\"\\n      [resizableColumns]=\\\"true\\\"\\n      [scrollable]=\\\"true\\\"\\n      (onLazyLoad)=\\\"onPageChange($event)\\\"\\n    >\\n      <ng-template pTemplate=\\\"colgroup\\\">\\n        <colgroup>\\n          <col *ngFor=\\\"let width of columnWidths\\\" [ngStyle]=\\\"{ 'width.px': width || undefined }\\\" />\\n        </colgroup>\\n      </ng-template>\\n      <ng-template pTemplate=\\\"emptymessage\\\" let-columns>\\n        <tr\\n          abp-table-empty-message\\n          [attr.colspan]=\\\"columnWidths.length\\\"\\n          localizationResource=\\\"AbpTenantManagement\\\"\\n          localizationProp=\\\"NoDataAvailableInDatatable\\\"\\n        ></tr>\\n      </ng-template>\\n      <ng-template pTemplate=\\\"header\\\" let-columns>\\n        <tr>\\n          <th>{{ 'AbpTenantManagement::Actions' | abpLocalization }}</th>\\n          <th pResizableColumn (click)=\\\"sortOrderIcon.sort('name')\\\">\\n            {{ 'AbpTenantManagement::TenantName' | abpLocalization }}\\n            <abp-sort-order-icon\\n              #sortOrderIcon\\n              key=\\\"name\\\"\\n              [(selectedKey)]=\\\"sortKey\\\"\\n              [(order)]=\\\"sortOrder\\\"\\n            >\\n            </abp-sort-order-icon>\\n          </th>\\n        </tr>\\n      </ng-template>\\n      <ng-template pTemplate=\\\"body\\\" let-data>\\n        <tr>\\n          <td class=\\\"text-center\\\">\\n            <div ngbDropdown container=\\\"body\\\" class=\\\"d-inline-block\\\">\\n              <button\\n                class=\\\"btn btn-primary btn-sm dropdown-toggle\\\"\\n                data-toggle=\\\"dropdown\\\"\\n                aria-haspopup=\\\"true\\\"\\n                ngbDropdownToggle\\n              >\\n                <i class=\\\"fa fa-cog mr-1\\\"></i>{{ 'AbpTenantManagement::Actions' | abpLocalization }}\\n              </button>\\n              <div ngbDropdownMenu>\\n                <button\\n                  *abpPermission=\\\"'AbpTenantManagement.Tenants.Update'\\\"\\n                  ngbDropdownItem\\n                  (click)=\\\"editTenant(data.id)\\\"\\n                >\\n                  {{ 'AbpTenantManagement::Edit' | abpLocalization }}\\n                </button>\\n                <button\\n                  *abpPermission=\\\"'AbpTenantManagement.Tenants.ManageConnectionStrings'\\\"\\n                  ngbDropdownItem\\n                  (click)=\\\"onEditConnectionString(data.id)\\\"\\n                >\\n                  {{ 'AbpTenantManagement::Permission:ManageConnectionStrings' | abpLocalization }}\\n                </button>\\n                <button\\n                  *abpPermission=\\\"'AbpTenantManagement.Tenants.ManageFeatures'\\\"\\n                  ngbDropdownItem\\n                  (click)=\\\"providerKey = data.id; visibleFeatures = true\\\"\\n                >\\n                  {{ 'AbpTenantManagement::Permission:ManageFeatures' | abpLocalization }}\\n                </button>\\n                <button\\n                  *abpPermission=\\\"'AbpTenantManagement.Tenants.Delete'\\\"\\n                  ngbDropdownItem\\n                  (click)=\\\"delete(data.id, data.name)\\\"\\n                >\\n                  {{ 'AbpTenantManagement::Delete' | abpLocalization }}\\n                </button>\\n              </div>\\n            </div>\\n          </td>\\n          <td>{{ data.name }}</td>\\n        </tr>\\n      </ng-template>\\n    </p-table>\\n  </div>\\n</div>\\n\\n<abp-modal size=\\\"md\\\" [(visible)]=\\\"isModalVisible\\\" [busy]=\\\"modalBusy\\\">\\n  <ng-template #abpHeader>\\n    <h3>{{ selectedModalContent.title | abpLocalization }}</h3>\\n  </ng-template>\\n\\n  <ng-template #abpBody>\\n    <ng-container *ngTemplateOutlet=\\\"selectedModalContent?.template\\\"></ng-container>\\n  </ng-template>\\n\\n  <ng-template #abpFooter>\\n    <button #abpClose type=\\\"button\\\" class=\\\"btn btn-secondary\\\">\\n      {{ 'AbpTenantManagement::Cancel' | abpLocalization }}\\n    </button>\\n    <abp-button iconClass=\\\"fa fa-check\\\" (click)=\\\"save()\\\" [disabled]=\\\"isDisabledSaveButton\\\">{{\\n      'AbpIdentity::Save' | abpLocalization\\n    }}</abp-button>\\n  </ng-template>\\n</abp-modal>\\n\\n<ng-template #tenantModalTemplate>\\n  <form [formGroup]=\\\"tenantForm\\\" (ngSubmit)=\\\"save()\\\" validateOnSubmit>\\n    <div class=\\\"mt-2\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"name\\\">{{ 'AbpTenantManagement::TenantName' | abpLocalization }}</label>\\n        <input type=\\\"text\\\" id=\\\"name\\\" class=\\\"form-control\\\" formControlName=\\\"name\\\" autofocus />\\n      </div>\\n    </div>\\n  </form>\\n</ng-template>\\n\\n<ng-template #connectionStringModalTemplate>\\n  <form [formGroup]=\\\"defaultConnectionStringForm\\\" (ngSubmit)=\\\"save()\\\" validateOnSubmit>\\n    <div class=\\\"form-group\\\">\\n      <div class=\\\"custom-checkbox custom-control mb-2\\\">\\n        <input\\n          id=\\\"useSharedDatabase\\\"\\n          type=\\\"checkbox\\\"\\n          class=\\\"custom-control-input\\\"\\n          formControlName=\\\"useSharedDatabase\\\"\\n          autofocus\\n          (ngModelChange)=\\\"onSharedDatabaseChange($event)\\\"\\n        />\\n        <label for=\\\"useSharedDatabase\\\" class=\\\"custom-control-label\\\">{{\\n          'AbpTenantManagement::DisplayName:UseSharedDatabase' | abpLocalization\\n        }}</label>\\n      </div>\\n    </div>\\n    <div class=\\\"form-group\\\" *ngIf=\\\"!useSharedDatabase\\\">\\n      <label for=\\\"defaultConnectionString\\\">{{\\n        'AbpTenantManagement::DisplayName:DefaultConnectionString' | abpLocalization\\n      }}</label>\\n      <input\\n        type=\\\"text\\\"\\n        id=\\\"defaultConnectionString\\\"\\n        class=\\\"form-control\\\"\\n        formControlName=\\\"defaultConnectionString\\\"\\n      />\\n    </div>\\n  </form>\\n</ng-template>\\n\\n<abp-feature-management [(visible)]=\\\"visibleFeatures\\\" providerName=\\\"T\\\" [providerKey]=\\\"providerKey\\\">\\n</abp-feature-management>\\n\"\n            }] }\n];\n/** @nocollapse */\nTenantsComponent.ctorParameters = () => [\n    { type: ConfirmationService },\n    { type: TenantManagementService },\n    { type: FormBuilder },\n    { type: Store }\n];\nTenantsComponent.propDecorators = {\n    tenantModalTemplate: [{ type: ViewChild, args: ['tenantModalTemplate', { static: false },] }],\n    connectionStringModalTemplate: [{ type: ViewChild, args: ['connectionStringModalTemplate', { static: false },] }]\n};\n__decorate([\n    Select(TenantManagementState.get),\n    __metadata(\"design:type\", Observable)\n], TenantsComponent.prototype, \"data$\", void 0);\n__decorate([\n    Select(TenantManagementState.getTenantsTotalCount),\n    __metadata(\"design:type\", Observable)\n], TenantsComponent.prototype, \"totalCount$\", void 0);\nif (false) {\n    /** @type {?} */\n    TenantsComponent.prototype.data$;\n    /** @type {?} */\n    TenantsComponent.prototype.totalCount$;\n    /** @type {?} */\n    TenantsComponent.prototype.selected;\n    /** @type {?} */\n    TenantsComponent.prototype.tenantForm;\n    /** @type {?} */\n    TenantsComponent.prototype.defaultConnectionStringForm;\n    /** @type {?} */\n    TenantsComponent.prototype.defaultConnectionString;\n    /** @type {?} */\n    TenantsComponent.prototype.isModalVisible;\n    /** @type {?} */\n    TenantsComponent.prototype.selectedModalContent;\n    /** @type {?} */\n    TenantsComponent.prototype.visibleFeatures;\n    /** @type {?} */\n    TenantsComponent.prototype.providerKey;\n    /** @type {?} */\n    TenantsComponent.prototype._useSharedDatabase;\n    /** @type {?} */\n    TenantsComponent.prototype.pageQuery;\n    /** @type {?} */\n    TenantsComponent.prototype.loading;\n    /** @type {?} */\n    TenantsComponent.prototype.modalBusy;\n    /** @type {?} */\n    TenantsComponent.prototype.sortOrder;\n    /** @type {?} */\n    TenantsComponent.prototype.sortKey;\n    /** @type {?} */\n    TenantsComponent.prototype.tenantModalTemplate;\n    /** @type {?} */\n    TenantsComponent.prototype.connectionStringModalTemplate;\n    /**\n     * @type {?}\n     * @private\n     */\n    TenantsComponent.prototype.confirmationService;\n    /**\n     * @type {?}\n     * @private\n     */\n    TenantsComponent.prototype.tenantService;\n    /**\n     * @type {?}\n     * @private\n     */\n    TenantsComponent.prototype.fb;\n    /**\n     * @type {?}\n     * @private\n     */\n    TenantsComponent.prototype.store;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/tenant-management-routing.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nconst ɵ0 = { requiredPolicy: 'AbpTenantManagement.Tenants' };\n/** @type {?} */\nconst routes = [\n    { path: '', redirectTo: 'tenants', pathMatch: 'full' },\n    {\n        path: 'tenants',\n        component: DynamicLayoutComponent,\n        canActivate: [AuthGuard, PermissionGuard],\n        data: ɵ0,\n        children: [{ path: '', component: TenantsComponent }],\n    },\n];\nclass TenantManagementRoutingModule {\n}\nTenantManagementRoutingModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [RouterModule.forChild(routes)],\n                exports: [RouterModule],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/tenant-management.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass TenantManagementModule {\n}\nTenantManagementModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [TenantsComponent],\n                imports: [\n                    TenantManagementRoutingModule,\n                    NgxsModule.forFeature([TenantManagementState]),\n                    NgxValidateCoreModule,\n                    CoreModule,\n                    TableModule,\n                    ThemeSharedModule,\n                    NgbDropdownModule,\n                    FeatureManagementModule,\n                ],\n            },] }\n];\n/**\n *\n * @deprecated since version 0.9.0\n * @return {?}\n */\nfunction TenantManagementProviders() {\n    return [];\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/actions/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/constants/routes.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n *\n * @deprecated since version 0.9.0\n * @type {?}\n */\nconst TENANT_MANAGEMENT_ROUTES = {\n    routes: (/** @type {?} */ ([\n        {\n            name: 'AbpTenantManagement::Menu:TenantManagement',\n            path: 'tenant-management',\n            parentName: 'AbpUiNavigation::Menu:Administration',\n            layout: \"application\" /* application */,\n            iconClass: 'fa fa-users',\n            children: [\n                {\n                    path: 'tenants',\n                    name: 'AbpTenantManagement::Tenants',\n                    order: 1,\n                    requiredPolicy: 'AbpTenantManagement.Tenants',\n                },\n            ],\n        },\n    ])),\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/constants/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/models/tenant-management.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TenantManagement;\n(function (TenantManagement) {\n    /**\n     * @record\n     */\n    function State() { }\n    TenantManagement.State = State;\n    if (false) {\n        /** @type {?} */\n        State.prototype.result;\n        /** @type {?} */\n        State.prototype.selectedItem;\n    }\n    /**\n     * @record\n     */\n    function Item() { }\n    TenantManagement.Item = Item;\n    if (false) {\n        /** @type {?} */\n        Item.prototype.id;\n        /** @type {?} */\n        Item.prototype.name;\n    }\n    /**\n     * @record\n     */\n    function AddRequest() { }\n    TenantManagement.AddRequest = AddRequest;\n    if (false) {\n        /** @type {?} */\n        AddRequest.prototype.name;\n    }\n    /**\n     * @record\n     */\n    function UpdateRequest() { }\n    TenantManagement.UpdateRequest = UpdateRequest;\n    if (false) {\n        /** @type {?} */\n        UpdateRequest.prototype.id;\n    }\n    /**\n     * @record\n     */\n    function DefaultConnectionStringRequest() { }\n    TenantManagement.DefaultConnectionStringRequest = DefaultConnectionStringRequest;\n    if (false) {\n        /** @type {?} */\n        DefaultConnectionStringRequest.prototype.id;\n        /** @type {?} */\n        DefaultConnectionStringRequest.prototype.defaultConnectionString;\n    }\n})(TenantManagement || (TenantManagement = {}));\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/models/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/services/tenant-management-state.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass TenantManagementStateService {\n    /**\n     * @param {?} store\n     */\n    constructor(store) {\n        this.store = store;\n    }\n    /**\n     * @return {?}\n     */\n    get() {\n        return this.store.selectSnapshot(TenantManagementState.get);\n    }\n    /**\n     * @return {?}\n     */\n    getTenantsTotalCount() {\n        return this.store.selectSnapshot(TenantManagementState.getTenantsTotalCount);\n    }\n}\nTenantManagementStateService.decorators = [\n    { type: Injectable, args: [{\n                providedIn: 'root',\n            },] }\n];\n/** @nocollapse */\nTenantManagementStateService.ctorParameters = () => [\n    { type: Store }\n];\n/** @nocollapse */ TenantManagementStateService.ngInjectableDef = ɵɵdefineInjectable({ factory: function TenantManagementStateService_Factory() { return new TenantManagementStateService(ɵɵinject(Store)); }, token: TenantManagementStateService, providedIn: \"root\" });\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    TenantManagementStateService.prototype.store;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/services/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/states/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: abp-ng.tenant-management.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { CreateTenant, DeleteTenant, GetTenantById, GetTenants, TENANT_MANAGEMENT_ROUTES, TenantManagementModule, TenantManagementProviders, TenantManagementService, TenantManagementState, TenantManagementStateService, TenantsComponent, UpdateTenant, TenantsComponent as ɵa, TenantManagementState as ɵb, TenantManagementService as ɵc, GetTenants as ɵd, GetTenantById as ɵe, CreateTenant as ɵf, UpdateTenant as ɵg, DeleteTenant as ɵh, TenantManagementRoutingModule as ɵj };\n//# sourceMappingURL=abp-ng.tenant-management.js.map\n","import { NgModule } from '@angular/core';\nimport { TenantManagementModule } from '@abp/ng.tenant-management';\n\n@NgModule({\n  imports: [TenantManagementModule],\n})\nexport class TenantManagementWrapperModule {}\n"],"sourceRoot":"webpack:///"}