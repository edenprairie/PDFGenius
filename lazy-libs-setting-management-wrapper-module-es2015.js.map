{"version":3,"sources":["./node_modules/@abp/ng.setting-management/fesm2015/abp-ng.setting-management.js","./src/app/lazy-libs/setting-management-wrapper.module.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+E;AACN;AACrB;AACG;AACkB;AAC1B;;AAE/C;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAKV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,2BAA2B,cAAc;AACzC;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,6BAA6B,aAAa,GAAG,UAAU;AACvD;AACA;AACA,SAAS;AACT;AACA;AACA,wDAAU;AACV,IAAI,0DAAM;AACV,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,4DAAQ;AACZ,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,yBAAyB,wDAAU;AACnC,IAAI,yDAAK;AACT;AACA,8BAA8B,EAAE,MAAM,gBAAgB,EAAE;AACxD,KAAK;AACL;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,wBAAwB,2EAAc;AACtC;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,6CAA6C,wDAAW;AACxD;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA,+HAA+H,sDAAsD,oiBAAoiB,kZAAkZ,kCAAkC;AAC7oC,aAAa;AACb;AACA;AACA;AACA,KAAK,OAAO,sDAAM,EAAE;AACpB,KAAK,OAAO,iDAAK;AACjB;AACA,WAAW,EAeV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,YAAY;AACZ,WAAW,EAAE;AACb;AACA;AACA;AACA,mBAAmB,mEAAsB;AACzC;AACA,aAAa,4DAA4D;AACzE;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB,0BAA0B,4DAAY;AACtC,0BAA0B,4DAAY;AACtC,aAAa;AACb;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB;AACA;AACA;AACA,oBAAoB,uDAAU;AAC9B,oBAAoB,sEAAiB;AACrC,oBAAoB,sDAAU;AAC9B;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEgK;AAChK;;;;;;;;;;;;;;;;;;;ACxNyC;AAC4B;AAKrE,IAAa,8BAA8B,GAA3C,MAAa,8BAA8B;CAAG;AAAjC,8BAA8B;IAH1C,8DAAQ,CAAC;QACR,OAAO,EAAE,CAAC,kFAAuB,CAAC;KACnC,CAAC;GACW,8BAA8B,CAAG;AAAH","file":"lazy-libs-setting-management-wrapper-module-es2015.js","sourcesContent":["import { ConfigState, DynamicLayoutComponent, CoreModule } from '@abp/ng.core';\nimport { getSettingTabs, ThemeSharedModule } from '@abp/ng.theme.shared';\nimport { Component, NgModule } from '@angular/core';\nimport { Router, RouterModule } from '@angular/router';\nimport { Action, Selector, State, Store, NgxsModule } from '@ngxs/store';\nimport { __decorate, __metadata } from 'tslib';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/actions/setting-management.actions.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass SetSelectedSettingTab {\n    /**\n     * @param {?} payload\n     */\n    constructor(payload) {\n        this.payload = payload;\n    }\n}\nSetSelectedSettingTab.type = '[SettingManagement] Set Selected Tab';\nif (false) {\n    /** @type {?} */\n    SetSelectedSettingTab.type;\n    /** @type {?} */\n    SetSelectedSettingTab.prototype.payload;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/states/setting-management.state.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nlet SettingManagementState = class SettingManagementState {\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    static getSelectedTab({ selectedTab }) {\n        return selectedTab;\n    }\n    /**\n     * @param {?} __0\n     * @param {?} __1\n     * @return {?}\n     */\n    settingManagementAction({ patchState }, { payload }) {\n        patchState({\n            selectedTab: payload,\n        });\n    }\n};\n__decorate([\n    Action(SetSelectedSettingTab),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object, SetSelectedSettingTab]),\n    __metadata(\"design:returntype\", void 0)\n], SettingManagementState.prototype, \"settingManagementAction\", null);\n__decorate([\n    Selector(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object]),\n    __metadata(\"design:returntype\", void 0)\n], SettingManagementState, \"getSelectedTab\", null);\nSettingManagementState = __decorate([\n    State({\n        name: 'SettingManagementState',\n        defaults: (/** @type {?} */ ({ selectedTab: {} })),\n    })\n], SettingManagementState);\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/setting-management.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass SettingManagementComponent {\n    /**\n     * @param {?} router\n     * @param {?} store\n     */\n    constructor(router, store) {\n        this.router = router;\n        this.store = store;\n        this.settings = [];\n        this.trackByFn = (/**\n         * @param {?} _\n         * @param {?} item\n         * @return {?}\n         */\n        (_, item) => item.name);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selected(value) {\n        this.store.dispatch(new SetSelectedSettingTab(value));\n    }\n    /**\n     * @return {?}\n     */\n    get selected() {\n        /** @type {?} */\n        const value = this.store.selectSnapshot(SettingManagementState.getSelectedTab);\n        if ((!value || !value.component) && this.settings.length) {\n            return this.settings[0];\n        }\n        return value;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.settings = getSettingTabs()\n            .filter((/**\n         * @param {?} setting\n         * @return {?}\n         */\n        setting => this.store.selectSnapshot(ConfigState.getGrantedPolicy(setting.requiredPolicy))))\n            .sort((/**\n         * @param {?} a\n         * @param {?} b\n         * @return {?}\n         */\n        (a, b) => a.order - b.order));\n        if (!this.selected && this.settings.length) {\n            this.selected = this.settings[0];\n        }\n    }\n}\nSettingManagementComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'abp-setting-management',\n                template: \"<div class=\\\"row entry-row\\\">\\n  <div class=\\\"col-auto\\\">\\n    <h1 class=\\\"content-header-title\\\">{{ 'AbpSettingManagement::Settings' | abpLocalization }}</h1>\\n  </div>\\n  <div id=\\\"breadcrumb\\\" class=\\\"col-md-auto pl-md-0\\\">\\n    <abp-breadcrumb></abp-breadcrumb>\\n  </div>\\n  <div class=\\\"col\\\">\\n    <div class=\\\"text-lg-right pt-2\\\" id=\\\"AbpContentToolbar\\\"></div>\\n  </div>\\n</div>\\n\\n<div id=\\\"SettingManagementWrapper\\\">\\n  <div class=\\\"card\\\">\\n    <div class=\\\"card-body\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-12 col-md-3\\\">\\n          <ul class=\\\"nav flex-column nav-pills\\\" id=\\\"nav-tab\\\" role=\\\"tablist\\\">\\n            <li\\n              *abpFor=\\\"let setting of settings; trackBy: trackByFn\\\"\\n              (click)=\\\"selected = setting\\\"\\n              class=\\\"nav-item pointer\\\"\\n              [abpPermission]=\\\"setting.requiredPolicy\\\"\\n            >\\n              <a\\n                class=\\\"nav-link\\\"\\n                [id]=\\\"setting.name + '-tab'\\\"\\n                role=\\\"tab\\\"\\n                [class.active]=\\\"setting.name === selected.name\\\"\\n                >{{ setting.name | abpLocalization }}</a\\n              >\\n            </li>\\n          </ul>\\n        </div>\\n        <div class=\\\"col-12 col-md-9\\\">\\n          <div *ngIf=\\\"settings.length\\\" class=\\\"tab-content\\\">\\n            <div class=\\\"tab-pane fade show active\\\" [id]=\\\"selected.name + '-tab'\\\" role=\\\"tabpanel\\\">\\n              <ng-container *ngComponentOutlet=\\\"selected.component\\\"></ng-container>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"\n            }] }\n];\n/** @nocollapse */\nSettingManagementComponent.ctorParameters = () => [\n    { type: Router },\n    { type: Store }\n];\nif (false) {\n    /** @type {?} */\n    SettingManagementComponent.prototype.settings;\n    /** @type {?} */\n    SettingManagementComponent.prototype.trackByFn;\n    /**\n     * @type {?}\n     * @private\n     */\n    SettingManagementComponent.prototype.router;\n    /**\n     * @type {?}\n     * @private\n     */\n    SettingManagementComponent.prototype.store;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/setting-management-routing.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nconst ɵ0 = { requiredPolicy: 'AbpAccount.SettingManagement' };\n/** @type {?} */\nconst routes = [\n    {\n        path: '',\n        component: DynamicLayoutComponent,\n        children: [\n            { path: '', component: SettingManagementComponent, data: ɵ0 },\n        ],\n    },\n];\nclass SettingManagementRoutingModule {\n}\nSettingManagementRoutingModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [RouterModule.forChild(routes)],\n                exports: [RouterModule],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/setting-management.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass SettingManagementModule {\n}\nSettingManagementModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [SettingManagementComponent],\n                imports: [\n                    SettingManagementRoutingModule,\n                    CoreModule,\n                    ThemeSharedModule,\n                    NgxsModule.forFeature([SettingManagementState]),\n                ],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: abp-ng.setting-management.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { SettingManagementComponent, SettingManagementModule, SettingManagementRoutingModule as ɵa, SettingManagementState as ɵb, SetSelectedSettingTab as ɵc };\n//# sourceMappingURL=abp-ng.setting-management.js.map\n","import { NgModule } from '@angular/core';\nimport { SettingManagementModule } from '@abp/ng.setting-management';\n\n@NgModule({\n  imports: [SettingManagementModule],\n})\nexport class SettingManagementWrapperModule {}\n"],"sourceRoot":"webpack:///"}